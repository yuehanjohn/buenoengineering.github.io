import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _get from "@babel/runtime/helpers/get";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r) {
            return Object.getOwnPropertyDescriptor(e, r).enumerable;
        })), t.push.apply(t, o);
    }
    return t;
}

function _objectSpread(e) {
    for (var r = 1; r < arguments.length; r++) {
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {
            _defineProperty(e, r, t[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {
            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
        });
    }
    return e;
}

function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
            result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}

function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
import PropTypes from 'prop-types';
import classic from '../../skins/classic';
import responsive from '../../skins/responsive';
import facelift from '../../skins/facelift';
import {
    st,
    classes
} from './WixBaseUiEnvironment.st.css';
import {
    BaseUiNextContext as WixBaseUiEnvironmentContext,
    BaseUiNextConsumer as WixBaseUiEnvironmentConsumer,
    BaseUiNextProvider
} from '@wix/wix-base-ui-next';

/**
 * A wrapper component for an app to hold cross library global configuration such as theme, locale, etc.
 */
var WixBaseUiEnvironmentProvider = /*#__PURE__*/ function(_BaseUiNextProvider) {
    _inherits(WixBaseUiEnvironmentProvider, _BaseUiNextProvider);
    var _super = _createSuper(WixBaseUiEnvironmentProvider);

    function WixBaseUiEnvironmentProvider(props) {
        var _this;
        _classCallCheck(this, WixBaseUiEnvironmentProvider);
        _this = _super.call(this, props);
        _this.themes = {
            classic: classic,
            responsive: responsive,
            facelift: facelift
        };
        _this.themeRootSelectors = {
            classic: undefined,
            responsive: 'responsive-skin',
            facelift: 'classic-facelift-skin'
        };
        return _this;
    }
    _createClass(WixBaseUiEnvironmentProvider, [{
        key: "getClassName",
        value: function getClassName() {
            var _this$props = this.props,
                theme = _this$props.theme,
                madefor = _this$props.madefor,
                darkMode = _this$props.darkMode,
                inputBorders = _this$props.inputBorders;
            return st(classes.root, {
                madefor: madefor
            }, this.themes[theme]({
                darkMode: darkMode
            }), this.themeRootSelectors[theme], darkMode && 'dark-mode', inputBorders && theme === 'facelift' ? 'input-borders-experiment' : '', _get(_getPrototypeOf(WixBaseUiEnvironmentProvider.prototype), "getClassName", this).call(this));
        }
    }, {
        key: "getDataAttributes",
        value: function getDataAttributes() {
            var madefor = this.props.madefor;
            return _objectSpread({
                'data-madefor': madefor
            }, _get(_getPrototypeOf(WixBaseUiEnvironmentProvider.prototype), "getDataAttributes", this).call(this));
        }
    }, {
        key: "getValue",
        value: function getValue() {
            var _this$props2 = this.props,
                theme = _this$props2.theme,
                darkMode = _this$props2.darkMode,
                madefor = _this$props2.madefor,
                inputBorders = _this$props2.inputBorders,
                forceCloseTooltipAutomaticallyAfter = _this$props2.forceCloseTooltipAutomaticallyAfter;
            return {
                theme: theme,
                darkMode: darkMode,
                madefor: madefor,
                inputBorders: inputBorders,
                forceCloseTooltipAutomaticallyAfter: forceCloseTooltipAutomaticallyAfter
            };
        }
    }]);
    return WixBaseUiEnvironmentProvider;
}(BaseUiNextProvider);
WixBaseUiEnvironmentProvider.displayName = 'WixBaseUiEnvironmentProvider';
WixBaseUiEnvironmentProvider.propTypes = {
    /** Applies a data-hook HTML attribute that can be used in the tests */
    dataHook: PropTypes.string,
    /** Renders the container as the given DOM tag element */
    as: PropTypes.string,
    /** Sets the theme for base-ui components inside the provider */
    theme: PropTypes.oneOf(['classic', 'responsive', 'facelift']),
    /** When provided, sets madefor as the font for the base-ui components inside the provider */
    madefor: PropTypes.bool,
    /** When provided, sets dark mode of the current skin */
    darkMode: PropTypes.bool,
    /** When provided, sets borders on all inputs and dropdowns */
    inputBorders: PropTypes.bool,
    /** DO NOT USE THIS PROP - this is an urgent quick fix for wix studio */
    forceCloseTooltipAutomaticallyAfter: PropTypes.number
};
WixBaseUiEnvironmentProvider.defaultProps = {
    theme: 'facelift',
    as: 'span',
    madefor: false,
    darkMode: false,
    inputBorders: false
};
export {
    WixBaseUiEnvironmentContext,
    WixBaseUiEnvironmentConsumer,
    WixBaseUiEnvironmentProvider
};