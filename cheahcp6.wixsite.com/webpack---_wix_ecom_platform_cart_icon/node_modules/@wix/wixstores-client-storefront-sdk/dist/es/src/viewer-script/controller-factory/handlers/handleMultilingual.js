import {
    __assign,
    __awaiter,
    __generator
} from "tslib";
import {
    APP_SETTINGS_CDN
} from '@wix/wixstores-client-core';
import {
    AppSettingsApi
} from '../../../apis/AppSettingsApi/AppSettingsApi';
import {
    MultilingualService
} from '../../../services/MultilingualService/MultilingualService';
import {
    appClient,
    Scope
} from '@wix/app-settings-client';
export function handleMultilingual(controllerParams, freeTextKeys) {
    var _a;
    return __awaiter(this, void 0, void 0, function() {
        var dangerousPublicDataOverride, setProps, siteStore, appSettingsApi, widgetSettings, multilingualService, nextPublicData, appSettingsClient;
        return __generator(this, function(_b) {
            switch (_b.label) {
                case 0:
                    dangerousPublicDataOverride = controllerParams.dangerousPublicDataOverride;
                    setProps = controllerParams.controllerConfig.setProps;
                    siteStore = controllerParams.appData.context.siteStore;
                    appSettingsApi = new AppSettingsApi({
                        siteStore: siteStore,
                        origin: ''
                    });
                    return [4 /*yield*/ , appSettingsApi.fetchWidgetSettings({
                        externalId: (_a = controllerParams.controllerConfig.config.externalId) !== null && _a !== void 0 ? _a : '',
                    })];
                case 1:
                    widgetSettings = (_b.sent()).widgetSettings;
                    multilingualService = new MultilingualService(siteStore, controllerParams.controllerConfig.config.publicData.APP, widgetSettings);
                    nextPublicData = dangerousPublicDataOverride({
                        APP: multilingualService.getMergedTranslationsAsPublicData(freeTextKeys),
                        COMPONENT: {},
                    });
                    // todo: move to updateConfig when Yoshi is presenting a solution
                    // todo: test after the change
                    /* istanbul ignore next */
                    if (typeof window !== 'undefined' && window.Wix) {
                        appSettingsClient = appClient({
                            scope: Scope.COMPONENT,
                            cdnUrl: APP_SETTINGS_CDN
                        });
                        appSettingsClient.onChange(function(settingsAsPublicData) {
                            multilingualService.setWidgetSettings(settingsAsPublicData);
                            setProps(__assign({}, dangerousPublicDataOverride({
                                APP: multilingualService.getMergedTranslationsAsPublicData(freeTextKeys),
                                COMPONENT: {},
                            })));
                        });
                    }
                    setProps(__assign({}, nextPublicData));
                    return [2 /*return*/ ];
            }
        });
    });
}
//# sourceMappingURL=handleMultilingual.js.map