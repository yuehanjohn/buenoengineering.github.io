import {
    __read,
    __spread
} from "tslib";
import {
    handleError
} from './handlers/handleError';
import {
    handleLocationChange
} from './handlers/handleLocationChange';
import {
    handleMultilingual
} from './handlers/handleMultilingual';
import {
    handleRTL
} from './handlers/handleRTL';
var createController = function(ControllerConstructor, controllerParams) {
    try {
        return new ControllerConstructor(controllerParams);
    } catch (e) {
        handleError(controllerParams)(e);
    }
};
export var controllerFactory = function(ControllerConstructor, _a) {
    var shouldSkipMultilingual = (_a === void 0 ? {} : _a).shouldSkipMultilingual;
    return function(controllerParams) {
        var controller = createController(ControllerConstructor, controllerParams);
        return {
            pageReady: function() {
                return Promise.resolve()
                    .then(handleRTL(controllerParams))
                    .then(function() {
                        return Promise.all(__spread((shouldSkipMultilingual ? [] : [handleMultilingual(controllerParams, controller.getFreeTexts())]), [
                            controller.init(),
                        ]));
                    })
                    .then(handleLocationChange(controllerParams, function() {
                        return void controller.load();
                    }))
                    .catch(handleError(controllerParams));
            },
            exports: function() {
                return controller.exports();
            },
            updateConfig: function(_$w, updatedConfig) {
                var _a, _b;
                void((_a = controller.onConfigUpdate) === null || _a === void 0 ? void 0 : _a.call(controller, updatedConfig));
                return void((_b = controller.onStyleUpdate) === null || _b === void 0 ? void 0 : _b.call(controller, updatedConfig.style.styleParams));
            },
            updateAppSettings: function(_$w, updates) {
                var _a;
                return void((_a = controller.onAppSettingsUpdate) === null || _a === void 0 ? void 0 : _a.call(controller, updates));
            },
            onBeforeUnLoad: function() {
                var _a;
                return (_a = controller.onBeforeUnLoad) === null || _a === void 0 ? void 0 : _a.call(controller);
            },
        };
    };
};
//# sourceMappingURL=controllerFactory.js.map