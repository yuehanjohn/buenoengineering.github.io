var __extends = (this && this.__extends) || (function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({
                    __proto__: []
                }
                instanceof Array && function(d, b) {
                    d.__proto__ = b;
                }) ||
            function(d, b) {
                for (var p in b)
                    if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
            };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import {
    biLoggerFromProps
} from '../biLoggerProp';
import {
    workerErrorPropToError
} from '../workerErrorProp';
import {
    panoramaClientPropFromProps
} from '../panoramaClientProp';
import {
    FlowProps
} from './FlowProps';
var FlowPropsConsumer = /** @class */ (function(_super) {
    __extends(FlowPropsConsumer, _super);

    function FlowPropsConsumer(_a) {
        var props = _a.props;
        var _this = _super.call(this) || this;
        _this.getPanoramaClient = function() {
            return panoramaClientPropFromProps({
                errorMonitorWithOptions: _this.getProp('errorMonitorWithOptions'),
                transactionWithAction: _this.getProp('transactionWithAction'),
                logger: _this.getProp('logger'),
            });
        };
        _this.getBILogger = function() {
            return biLoggerFromProps({
                biMethods: _this.getProp('biMethods'),
                biUtil: _this.getProp('biUtil'),
            });
        };
        _this.initConsumerProps(props);
        return _this;
    }
    FlowPropsConsumer.prototype.initConsumerProps = function(props) {
        this.store = props;
    };
    FlowPropsConsumer.prototype.getControllerError = function() {
        var error = this.getProp('error');
        return error ? workerErrorPropToError(this.getProp('error')) : null;
    };
    return FlowPropsConsumer;
}(FlowProps));
export {
    FlowPropsConsumer
};
//# sourceMappingURL=FlowPropsConsumer.js.map