import {
    __awaiter,
    __generator
} from "tslib";
var AppClient = /** @class */ (function() {
    function AppClient(_a) {
        var adapter = _a.adapter,
            scope = _a.scope,
            cdnClient = _a.cdnClient,
            data = _a.data;
        var _this = this;
        this.adapter = adapter;
        this.scope = scope;
        this.cdnClient = cdnClient;
        this.data = data;
        this.listeners = [];
        //TODO: what happens if data is not loaded?
        this.adapter.onSettingsUpdated(scope, function(data) {
            _this.data = data;
            _this.listeners.forEach(function(l) {
                return l(_this.data);
            });
        });
    }
    AppClient.prototype.getAll = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.get()];
                    case 1:
                        return [2 /*return*/ , _a.sent()];
                }
            });
        });
    };
    AppClient.prototype.get = function(key) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , this.loadData()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/ , key ? this.data[key] : this.data];
                }
            });
        });
    };
    AppClient.prototype.onChange = function(cb) {
        this.listeners.push(cb);
    };
    AppClient.prototype.loadData = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.getPromise) {
                            this.getPromise = this.resolveData();
                        }
                        return [4 /*yield*/ , this.getPromise];
                    case 1:
                        _a.sent();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    AppClient.prototype.resolveData = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _a, _b;
            return __generator(this, function(_c) {
                switch (_c.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/ , this.getExternalId()];
                    case 1:
                        _a.externalId = _c.sent();
                        if (!(!this.data && this.externalId)) return [3 /*break*/ , 3];
                        _b = this;
                        return [4 /*yield*/ , this.cdnClient.get(this.adapter.getAppDefId(), this.adapter.getInstanceId(), this.externalId, this.scope)];
                    case 2:
                        _b.data = _c.sent();
                        return [3 /*break*/ , 4];
                    case 3:
                        if (!this.data) {
                            this.data = {};
                        }
                        _c.label = 4;
                    case 4:
                        return [2 /*return*/ ];
                }
            });
        });
    };
    AppClient.prototype.getExternalId = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _a;
            return __generator(this, function(_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.externalId;
                        if (_a) return [3 /*break*/ , 2];
                        return [4 /*yield*/ , this.adapter.getExternalId()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        return [2 /*return*/ , _a];
                }
            });
        });
    };
    return AppClient;
}());
export {
    AppClient
};
//# sourceMappingURL=app-client.js.map