/**
 * A function to create a log object for the 'checkoutMinimumOrderClickOnGotItInErrorModalInCheckout' event (evid: 655)
 *
 * Event description: Minimum order - click on ‘got it’ in error modal in checkout
 *
 * @param {checkoutMinimumOrderClickOnGotItInErrorModalInCheckoutParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - only in EP
 * @property {string} currency - the currency that was shown in the message
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 100,000
 * @property {GUID} ecomId - ecom_id
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} minimumValueLong - the minimum order threshold multiplied by 100,000
 * @property {string} stage - the stage in the checkout the visitor was at when the modal was opened
 * @return {LogObject<checkoutMinimumOrderClickOnGotItInErrorModalInCheckoutParams>} LogObject<checkoutMinimumOrderClickOnGotItInErrorModalInCheckoutParams>
 */
export function checkoutMinimumOrderClickOnGotItInErrorModalInCheckout(params) {
    return {
        evid: 655,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'cartClickOnCartIconToOpenMiniCart' event (evid: 49)
 *
 * Event description: click on cart icon to open the mini cart
 *
 * @param {cartClickOnCartIconToOpenMiniCartParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {number} itemsCount - Numbers of items in cart
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isNavigateCart - hard coded false (for Anodot)
 * @property {string} viewMode - editor / site / preview
 * @return {LogObject<cartClickOnCartIconToOpenMiniCartParams>} LogObject<cartClickOnCartIconToOpenMiniCartParams>
 */
export function cartClickOnCartIconToOpenMiniCart(params) {
    return {
        evid: 49,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'thankYouPageLoadSf' event (evid: 174)
 *
 * Event description: this event indicates when the "thank you page" was presented to the user:
 *
 * @param {thankYouPageLoadSfParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} checkoutId - Order.checkoutId
 * @property {GUID} ecomId - ecom_id
 * @property {string} itemType - List of distinct Order.lineItems.itemType
 * @property {number} numOfLineItems - Count distinct Order.lineItems.id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} orderId - orderId
 * @property {string} origin - the state of the panel when the user clicked on the button
 * @property {string} paymentMethodType - List of distinct Order.lineItems.paymentOption
 * @property {string} paymentProvider
 * @property {string} payment_status - payment_status
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} viewMode - DESKTOP etc.
 * @return {LogObject<thankYouPageLoadSfParams>} LogObject<thankYouPageLoadSfParams>
 */
export function thankYouPageLoadSf(params) {
    return {
        evid: 174,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnBackInCheckoutProcess' event (evid: 170)
 *
 * Event description: click on 'back' or 'edit' in checkout process. since june 2019 also sent from OneApp
 *
 * @param {clickOnBackInCheckoutProcessParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} previousStage - the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
 * @property {string} stage - which stage in the wishlist installation process
 * @return {LogObject<clickOnBackInCheckoutProcessParams>} LogObject<clickOnBackInCheckoutProcessParams>
 */
export function clickOnBackInCheckoutProcess(params) {
    return {
        evid: 170,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutSubscriptionCheckboxIsCheckUncheck' event (evid: 837)
 *
 * Event description: When a uou check/uncheck the subscription checkbox
 *  in the checkout. BI events not exist yet
 *
 * @param {checkoutSubscriptionCheckboxIsCheckUncheckParams} params - The parameters for this event
 * @property {string} action - check/unchecked
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<checkoutSubscriptionCheckboxIsCheckUncheckParams>} LogObject<checkoutSubscriptionCheckboxIsCheckUncheckParams>
 */
export function checkoutSubscriptionCheckboxIsCheckUncheck(params) {
    return {
        evid: 837,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'updatedCartItemQuantitySf' event (evid: 116)
 *
 * Event description: Updated cart item quantity
 *
 * @param {updatedCartItemQuantitySfParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount - number of items in the cart
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} origin - origin
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productId - product_id
 * @return {LogObject<updatedCartItemQuantitySfParams>} LogObject<updatedCartItemQuantitySfParams>
 */
export function updatedCartItemQuantitySf(params) {
    return {
        evid: 116,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnAddToCart' event (evid: 63)
 *
 * Event description: buyer clicks on add to cart. Also since june 2019 can be sent from OneApp store front (member view) with origin ='OA StoreFront'. Currently not sent from src 130, under disscussions
 *
 * @param {clickOnAddToCartParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} buttonType - buy now / add to cart / subscribe now
 * @property {GUID} checkoutId - checkout_id
 * @property {number} quantity - added product quntety
 * @property {boolean} hasOptions - does the product have options
 * @property {boolean} isNavigateCart - true if the button redirect to cart (mobile or without cart icon), false otherwise
 * @property {string} navigationClick - mini-cart / cart  / none / checkout
 * @property {string} options - a json containing the options selected for the product
 * @property {string} origin - origin
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productId - product_id
 * @property {string} productType - digital / physical
 * @property {GUID} uuid - uuid
 * @property {string} viewMode - editor / site / preview
 * @return {LogObject<clickOnAddToCartParams>} LogObject<clickOnAddToCartParams>
 */
export function clickOnAddToCart(params) {
    return {
        evid: 63,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnAddNoteToSellerSf' event (evid: 121)
 *
 * Event description: buyer clicks on 'add note to seller' in cart page. since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {clickOnAddNoteToSellerSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart id
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)v
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} origin - OA StoreFront
 * @return {LogObject<clickOnAddNoteToSellerSfParams>} LogObject<clickOnAddNoteToSellerSfParams>
 */
export function clickOnAddNoteToSellerSf(params) {
    return {
        evid: 121,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutPageSpecificStageExpanded' event (evid: 37)
 *
 * Event description: when a new stage is expanded and another collapse.
 * When all data is visible. since june 2019 is sent also from OneApp
 *
 * @param {checkoutPageSpecificStageExpandedParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} additionalRequiredField - only for 'placeOrderFastFlow' stage: required additional field that we didnt get info fron PayPal) for "Place Order" button to be clickable='state'/'zip code' / 'state and zip code' / 'none'
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - catalog_app_id
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount - Numbers of items in cart
 * @property {GUID} ecomId - ecom_id
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {boolean} hasGiftCard - payment stage only - true  if visitor sees the Gift Card Checkbox
 * @property {boolean} isFirstTimeUsage - True If the user sees this stage for the first time, false if it's from edit click
 * @property {boolean} isGiftCardApplied - payment stage only  - true if giftcard is already applied on load
 * @property {boolean} isCartPaidOnlyWithGiftCard - True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} origin - 'OA StoreFront' (for OneApp)
 * @property {GUID} owner_id - uuid of site owner
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {string} shippingMethodType - shipping / store pickup or pickup  / none
 * @property {string} shippingStatus - data on shipping status from shipping service, only relevant after shipping details were field
 * @property {string} stage - which stage in the wishlist installation process
 * @property {string} validationMessage - JSON with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @property {string} validationSpi - jason with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @return {LogObject<checkoutPageSpecificStageExpandedParams>} LogObject<checkoutPageSpecificStageExpandedParams>
 */
export function checkoutPageSpecificStageExpanded(params) {
    return {
        evid: 37,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'oaDebugGeneralEvent' event (evid: 458)
 *
 * Event description: event for debuging
 *
 * @param {oaDebugGeneralEventParams} params - The parameters for this event
 * @property {string} info - debug info
 * @property {string} name - what for event is sent
 * @return {LogObject<oaDebugGeneralEventParams>} LogObject<oaDebugGeneralEventParams>
 */
export function oaDebugGeneralEvent(params) {
    return {
        evid: 458,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutNotAbleToAcceptPaymentsVisitorPopupSf' event (evid: 283)
 *
 * Event description: Error pop-up opens when the buyer clicks on one of the checkout buttons, and If the store can't accept orders (not an Active Store / doesn't have any shipping rules).
 *
 * @param {checkoutNotAbleToAcceptPaymentsVisitorPopupSfParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - Should be taken from checkout.Checkout Object.checkoutId
 * @property {GUID} ecomId - ecom_id
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} origin
 * @property {string} viewMode - editor / live / preview
 * @return {LogObject<checkoutNotAbleToAcceptPaymentsVisitorPopupSfParams>} LogObject<checkoutNotAbleToAcceptPaymentsVisitorPopupSfParams>
 */
export function checkoutNotAbleToAcceptPaymentsVisitorPopupSf(params) {
    return {
        evid: 283,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToAddCoupon' event (evid: 111)
 *
 * Event description: user clicks on "add code"/"insert promo code" (first step of applying coupon) . since june 2019 also sent from OA StoreFront (member view)
 *
 * @param {clickToAddCouponParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isMember - true if visitor is member
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} origin - shopping cart / checkout
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<clickToAddCouponParams>} LogObject<clickToAddCouponParams>
 */
export function clickToAddCoupon(params) {
    return {
        evid: 111,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutUouSetShippingMethodInExpressCheckout' event (evid: 843)
 *
 * Event description: When the uou is set the shipping method in express checkout
 *
 * @param {checkoutUouSetShippingMethodInExpressCheckoutParams} params - The parameters for this event
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<checkoutUouSetShippingMethodInExpressCheckoutParams>} LogObject<checkoutUouSetShippingMethodInExpressCheckoutParams>
 */
export function checkoutUouSetShippingMethodInExpressCheckout(params) {
    return {
        evid: 843,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickPlaceOrderWithSubscription' event (evid: 58)
 *
 * Event description: if mail "Subscription" checkbox was checked on clicking on place order (client event). since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {clickPlaceOrderWithSubscriptionParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} default_state - true if was turned on by default by merchant settings
 * @property {GUID} ecomId - ecom_id
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} origin - OA StoreFront
 * @return {LogObject<clickPlaceOrderWithSubscriptionParams>} LogObject<clickPlaceOrderWithSubscriptionParams>
 */
export function clickPlaceOrderWithSubscription(params) {
    return {
        evid: 58,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'thankYouPageContinueBrowsingLinkClickedSf' event (evid: 176)
 *
 * @param {thankYouPageContinueBrowsingLinkClickedSfParams} params - The parameters for this event
 * @property {string} appName
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} checkoutId - Order.checkoutId
 * @property {GUID} ecomId - ecom_id
 * @property {string} orderId - orderId
 * @return {LogObject<thankYouPageContinueBrowsingLinkClickedSfParams>} LogObject<thankYouPageContinueBrowsingLinkClickedSfParams>
 */
export function thankYouPageContinueBrowsingLinkClickedSf(params) {
    return {
        evid: 176,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutPolicyAgreementCheckboxIsCheckUncheck' event (evid: 836)
 *
 * Event description: When a uou check/uncheck the policy agreement checkbox in the checkout. BI events not exist yet
 *
 * @param {checkoutPolicyAgreementCheckboxIsCheckUncheckParams} params - The parameters for this event
 * @property {string} action - check/unchecked
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<checkoutPolicyAgreementCheckboxIsCheckUncheckParams>} LogObject<checkoutPolicyAgreementCheckboxIsCheckUncheckParams>
 */
export function checkoutPolicyAgreementCheckboxIsCheckUncheck(params) {
    return {
        evid: 836,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutTipsTipAddedToCheckout' event (evid: 834)
 *
 * Event description: When a visitor adds a tip in the checkout (or - changes the default setting)_
 *
 * @param {checkoutTipsTipAddedToCheckoutParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isCustomTip - True - custom amount False - option from list
 * @property {number} rate - The tip value * 100000
 * @property {string} tipType - Percentage/Fixed amount
 * @return {LogObject<checkoutTipsTipAddedToCheckoutParams>} LogObject<checkoutTipsTipAddedToCheckoutParams>
 */
export function checkoutTipsTipAddedToCheckout(params) {
    return {
        evid: 834,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'errorInCheckout' event (evid: 24)
 *
 * Event description: errors in checkoutfunnel. since june 2019 also sent from OneApp (origin = 'OA StoreFront')
 *
 * @param {errorInCheckoutParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order. not exist in OOI checkout
 * @property {string} appName - app_name
 * @property {string} buyerLanguage - buyer Language. not exist in OOI checkout
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - list of all catalog app ids. A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} channelType - what is the channel type
 * @property {GUID} checkoutId - checkout_id
 * @property {string} contactId - Buyer's contact ID. take from: Checkout.Chekout object.buyerInfo.contactId
 * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
 * @property {number} dintinctNumItems - count distinct item_id. not exist in OOI checkout
 * @property {string} dintinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}. not exist in OOI checkout
 * @property {GUID} ecomId - ecom_id
 * @property {string} errorMessage - right now only relevant for minimum order, no message = NULL
 * @property {string} field - Icon text, button text, out of stock...
 * @property {string} flowType - 'quick flow' / 'full flow'. For OOI Checkout- fastFlow = 'fast flow', visitorPickupFlow = 'visitor pickup flow', memberPickupFlow = 'member pickup flow', visitorShippingFlow = 'visitor shipping flow', memberShippingFlow = 'member shipping flow', nonShippableFlow = 'non shippable flow', unrecognizedFlow = 'unrecognized Flow',
 * @property {boolean} isBuyNowPayLaterOption - is buy now pay later option exist. not exit in OOI checkout
 * @property {boolean} isBuyerNote - does a buyes note exist. not exit in OOI checkout
 * @property {boolean} isCalculationErrors - does calculation errors exist.
 * @property {boolean} isDiscountPriceSummary - does discount exist in price summary. not exit in OOI checkout
 * @property {boolean} isGiftCard - does gift card is available in the checkout
 * @property {boolean} isMember - true if visitor is member
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {boolean} isPolicy - has policies in checkout
 * @property {boolean} is_promo_code - is promo code (coupon) option visible in the cart & checkout
 * @property {boolean} isShippingPriceSummary - does shipping exist in price summary. not exit in OOI checkout
 * @property {boolean} isTaxPriceSummary - does tax exist in price summary. not exit in OOI checkout
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} itemsQuantity - sum of total items quantity. not exit in OOI checkout
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}. not exit in OOI checkout
 * @property {string} message - validation error
 * @property {number} numLineItems - total number of line items. not exit in OOI checkout
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}. not exit in OOI checkout
 * @property {number} num_of_paymet_providers - How many payment providers does the store/ site has connected. not exit in OOI checkout
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor. not exit in OOI checkout
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order. not exit in OOI checkout
 * @property {string} origin - OA StoreFront
 * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} paymet_providers - array of payment providers connected to the store site. not exit in OOI checkout
 * @property {boolean} savedAddress - true if the member has saved address. not exit in OOI checkout
 * @property {string} selectedCarrierServiceOption - Take from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption. not exit in OOI checkout
 * @property {string} selectedDeliveryOption - what was the selected delivery option.. not exit in OOI checkout
 * @property {string} shippingCity - buyer city when viewing the checkout. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.city. not exit in OOI checkout
 * @property {string} shippingCountry - buyer country code when viewing the checkout. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.country. not exit in OOI checkout
 * @property {string} shippingMethodType - shipping /store pickup / none. not exit in OOI checkout
 * @property {string} siteLanguage - site Language. not exit in OOI checkout
 * @property {string} stage - which stage in the wishlist installation process
 * @property {string} validationMessage - JSON with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @return {LogObject<errorInCheckoutParams>} LogObject<errorInCheckoutParams>
 */
export function errorInCheckout(params) {
    return {
        evid: 24,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'updateClickedInSelectYourShippingDestinationPopupSf' event (evid: 125)
 *
 * Event description: When a visitor clicks on one of the options in the shipping method dropdown on the cart page
 *
 * @param {updateClickedInSelectYourShippingDestinationPopupSfParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} hasZipCode - true if the destination was saved with zip code, else false
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} shippingDestinationCountry - shipping destination country
 * @property {string} shippingDestinationState - shipping destination state
 * @return {LogObject<updateClickedInSelectYourShippingDestinationPopupSfParams>} LogObject<updateClickedInSelectYourShippingDestinationPopupSfParams>
 */
export function updateClickedInSelectYourShippingDestinationPopupSf(params) {
    return {
        evid: 125,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutRedirectFromOoiCheckoutForDev' event (evid: 718)
 *
 * Event description: When UoU is redirected from the OOI checkout to the old Checkout (non-English/have bookings)
 *
 * @param {checkoutRedirectFromOoiCheckoutForDevParams} params - The parameters for this event
 * @property {GUID} checkoutId - The checkout_id won't sent when the reason is not fast flow
 * @property {string} reason - reason for the redirect (non-english, non-stores)
 * @return {LogObject<checkoutRedirectFromOoiCheckoutForDevParams>} LogObject<checkoutRedirectFromOoiCheckoutForDevParams>
 */
export function checkoutRedirectFromOoiCheckoutForDev(params) {
    return {
        evid: 718,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutUouReturnsFromExpressCheckout' event (evid: 842)
 *
 * Event description: When the uou is directed back to checkout / thank you page after filling details in express checkout
 *
 * @param {checkoutUouReturnsFromExpressCheckoutParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {string} destination - checkout/Thank you page  (where the uou lands when he gets back)
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} reason - Values:  shouldChooseShippingMethod / hasTermsAndConditions / hasCustomField / hasShippingError / hasTaxError / hasTotalAmountMismatchWithLatestSeen / hasViolations  Why the uou was directed back to checkout/ thank you page
 * @return {LogObject<checkoutUouReturnsFromExpressCheckoutParams>} LogObject<checkoutUouReturnsFromExpressCheckoutParams>
 */
export function checkoutUouReturnsFromExpressCheckout(params) {
    return {
        evid: 842,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'cartMiniCartLoaded' event (evid: 211)
 *
 * Event description: Mini Cart loaded
 *
 * @param {cartMiniCartLoadedParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @return {LogObject<cartMiniCartLoadedParams>} LogObject<cartMiniCartLoadedParams>
 */
export function cartMiniCartLoaded(params) {
    return {
        evid: 211,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutOoiDevsQaEvent' event (evid: 707)
 *
 * Event description: this bi event is for the devs QA checks
 *
 * @param {checkoutOoiDevsQaEventParams} params - The parameters for this event
 * @property {string} dataString - field with string to check
 * @return {LogObject<checkoutOoiDevsQaEventParams>} LogObject<checkoutOoiDevsQaEventParams>
 */
export function checkoutOoiDevsQaEvent(params) {
    return {
        evid: 707,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnEditCart' event (evid: 171)
 *
 * Event description: click on edit cart button in checkout process
 *
 * @param {clickOnEditCartParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName
 * @property {GUID} cartId
 * @property {string} cartType
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} origin
 * @return {LogObject<clickOnEditCartParams>} LogObject<clickOnEditCartParams>
 */
export function clickOnEditCart(params) {
    return {
        evid: 171,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutTotalsHaveBeenUpdatedPopUpShown' event (evid: 839)
 *
 * Event description: when the pop us is shown to user
 *
 * @param {checkoutTotalsHaveBeenUpdatedPopUpShownParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} checkoutId - checkout_id
 * @property {string} flowType - 'quick flow' / 'full flow'. For OOI Checkout-   fastFlow = 'fast flow'
 * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<checkoutTotalsHaveBeenUpdatedPopUpShownParams>} LogObject<checkoutTotalsHaveBeenUpdatedPopUpShownParams>
 */
export function checkoutTotalsHaveBeenUpdatedPopUpShown(params) {
    return {
        evid: 839,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutClickLoginInCheckout' event (evid: 604)
 *
 * Event description: When site member clicks to login in checkout
 * Until the 26.2.23 the event was sent as:
 * 5:601 Site Members - Click on Login/Sign Button up for site members
 *
 * @param {checkoutClickLoginInCheckoutParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} owner_id - owner_id
 * @property {boolean} savedAddress - true if the member has saved address
 * @return {LogObject<checkoutClickLoginInCheckoutParams>} LogObject<checkoutClickLoginInCheckoutParams>
 */
export function checkoutClickLoginInCheckout(params) {
    return {
        evid: 604,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'membersAddressInCheckoutWasChanged' event (evid: 48)
 *
 * Event description: when address was changed in the checkout
 *
 * @param {membersAddressInCheckoutWasChangedParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} origin - addresses list / add address / edit address
 * @property {string} stage - which stage the address was changed (payment/shipping..)
 * @return {LogObject<membersAddressInCheckoutWasChangedParams>} LogObject<membersAddressInCheckoutWasChangedParams>
 */
export function membersAddressInCheckoutWasChanged(params) {
    return {
        evid: 48,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'editorClickOnLeftBarTabsOnComponentSettingsSfe' event (evid: 33)
 *
 * Event description: click to view tab in the settings component (left bar)
 *
 * @param {editorClickOnLeftBarTabsOnComponentSettingsSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} component_id - grid gallery, slider galeery, product page, CurrencyConverter, AvalaraTax
 * @property {boolean} isPremiumEligible - Does the site have a premium package that allows using the feature (if not relevant null)
 * @property {string} origin - the state of the panel when the user clicked on the button
 * @property {string} tab
 * @return {LogObject<editorClickOnLeftBarTabsOnComponentSettingsSfeParams>} LogObject<editorClickOnLeftBarTabsOnComponentSettingsSfeParams>
 */
export function editorClickOnLeftBarTabsOnComponentSettingsSfe(params) {
    return {
        evid: 33,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'oneAppStoreFrontClearCartSf' event (evid: 184)
 *
 * Event description: OneApp StoreFront -> Clear cart SF
 *
 * @param {oneAppStoreFrontClearCartSfParams} params - The parameters for this event
 * @property {string} cartId - cartId
 * @property {string} catalogAppId - Stores/bookings App id
 * @property {number} itemsCount - # of products in cart
 * @return {LogObject<oneAppStoreFrontClearCartSfParams>} LogObject<oneAppStoreFrontClearCartSfParams>
 */
export function oneAppStoreFrontClearCartSf(params) {
    return {
        evid: 184,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutUouSetShippingAddressInExpressCheckout' event (evid: 844)
 *
 * Event description: When the uou is set the shipping address in express checkout
 *
 * @param {checkoutUouSetShippingAddressInExpressCheckoutParams} params - The parameters for this event
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<checkoutUouSetShippingAddressInExpressCheckoutParams>} LogObject<checkoutUouSetShippingAddressInExpressCheckoutParams>
 */
export function checkoutUouSetShippingAddressInExpressCheckout(params) {
    return {
        evid: 844,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutMinimumOrderModalIsShownInCheckout' event (evid: 654)
 *
 * Event description: Minimum order modal is shown in checkout
 *
 * @param {checkoutMinimumOrderModalIsShownInCheckoutParams} params - The parameters for this event
 * @property {string} appName
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - only in EP
 * @property {string} currency - the currency that was shown in the message
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold  multiplied by 100,000
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} hasPickup - has_pickup
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} minimumValueLong - the minimum order threshold multiplied by 100,000
 * @property {string} stage - the stage in the checkout the visitor was at when the modal was opened
 * @return {LogObject<checkoutMinimumOrderModalIsShownInCheckoutParams>} LogObject<checkoutMinimumOrderModalIsShownInCheckoutParams>
 */
export function checkoutMinimumOrderModalIsShownInCheckout(params) {
    return {
        evid: 654,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'shippingAddressSet' event (evid: 161)
 *
 * Event description: Shipping address set. since june 2019 is also sentt from OneApp (origin =OA StoreFront)
 *
 * @param {shippingAddressSetParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isChecked - is billing address the same as delivery address
 * @property {boolean} isFormValid - is form valid (all mandatory fields are compatible)
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {string} item_type - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} owner_id - uuid of site owner
 * @return {LogObject<shippingAddressSetParams>} LogObject<shippingAddressSetParams>
 */
export function shippingAddressSet(params) {
    return {
        evid: 161,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'editorChangeTextFieldSfe' event (evid: 833)
 *
 * Event description: change the text in store front settings
 *
 * @param {editorChangeTextFieldSfeParams} params - The parameters for this event
 * @property {string} appName
 * @property {string} component_id - grid gallery, slider galery, product page, mini cart....
 * @property {string} field - Icon text, button text, out of stock...
 * @property {string} origin - the state of the panel when the user clicked on the button
 * @property {string} text - custom filter name
 * @return {LogObject<editorChangeTextFieldSfeParams>} LogObject<editorChangeTextFieldSfeParams>
 */
export function editorChangeTextFieldSfe(params) {
    return {
        evid: 833,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'saveNoteToSellerSf' event (evid: 122)
 *
 * Event description: buyer clicks on 'done' in add note to seller field in cart page. since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {saveNoteToSellerSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart id
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} is_empty - is text field empty
 * @property {string} origin - origin
 * @return {LogObject<saveNoteToSellerSfParams>} LogObject<saveNoteToSellerSfParams>
 */
export function saveNoteToSellerSf(params) {
    return {
        evid: 122,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutOpenCloseYourOrderSummaryInMobile' event (evid: 835)
 *
 * Event description: when uou on a mobile device click on the order section to expand or collapse it and see/unsee the summary of the order with all the items.
 *
 * @param {checkoutOpenCloseYourOrderSummaryInMobileParams} params - The parameters for this event
 * @property {string} action - open/close
 * @property {string} catalogAppId - list of catalog_app_id in the checkout
 * @property {string} origin - Top/Bottom
 * @property {string} purchaseFlowId - purchaseFlowId
 * @return {LogObject<checkoutOpenCloseYourOrderSummaryInMobileParams>} LogObject<checkoutOpenCloseYourOrderSummaryInMobileParams>
 */
export function checkoutOpenCloseYourOrderSummaryInMobile(params) {
    return {
        evid: 835,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'editorOpenAppSettingsSfe' event (evid: 811)
 *
 * Event description: double click / right click on a wixstores component
 *
 * @param {editorOpenAppSettingsSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} component_id - CurAvalaraTax, grid gallery, slider gallery, product page, CurrencyConverter
 * @property {string} editorMode - mobile / desktop
 * @property {boolean} isPremiumEligible - Does the site have a premium package that allows using the feature (if not relevant null)
 * @property {string} origin - the state of the panel when the user clicked on the button:editor / onboarding /editorX…
 * @return {LogObject<editorOpenAppSettingsSfeParams>} LogObject<editorOpenAppSettingsSfeParams>
 */
export function editorOpenAppSettingsSfe(params) {
    return {
        evid: 811,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'viewCartPageSf' event (evid: 124)
 *
 * Event description: view cart page. since june 2019 also for OneApp Store front
 *
 * @param {viewCartPageSfParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {string} checkoutType - in viewer / out of viewer
 * @property {number} itemsCount - number of items in the cart
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isContinueShopping - show continue shopping link in cart
 * @property {boolean} isDeliveryRates - show delivery rates in cart
 * @property {boolean} isFullWidth - is the full width setting in the cart on / off
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
 * @property {boolean} is_note - show add a note to seller in cart
 * @property {boolean} isOwner - true for owner false for member. since june 2019
 * @property {boolean} isPickupAvailable - is pickup available
 * @property {boolean} is_promo_code - show/hide promo code (coupon) in the cart & checkout
 * @property {boolean} isShippingCalculated - is the shipping estimation is calculated
 * @property {boolean} isTaxCosts - show tax costs in cart
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {number} lineItemsCount - number of line items in cart
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} origin - add to cart / mini cart / cart widget / checkout / 'eWallet redirect - cancel'
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} shippingReason - the reason why the shipping is not calculated (unknown = POS/digital cart)
 * @property {GUID} siteMemberId - member guid
 * @property {GUID} uuid - uuid
 * @property {string} validationMessage - JSON with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @property {string} validationSpi - jason with the validation that appear in the cart while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @property {string} viewMode - editor / site / preview
 * @property {GUID} visitorId - visitorId
 * @return {LogObject<viewCartPageSfParams>} LogObject<viewCartPageSfParams>
 */
export function viewCartPageSf(params) {
    return {
        evid: 124,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutMemberClickOnEditMemberAddress' event (evid: 827)
 *
 * Event description: when a member clicks on edit/change member address
 *
 * @param {checkoutMemberClickOnEditMemberAddressParams} params - The parameters for this event
 * @property {GUID} addressServiceId - aaddress_id
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical) etc
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} origin - from where the visitor clicked on edit/change address - dropdown / error message
 * @property {string} stage - in which stage the visitor clicked on edit/change address - contact-details or billing
 * @return {LogObject<checkoutMemberClickOnEditMemberAddressParams>} LogObject<checkoutMemberClickOnEditMemberAddressParams>
 */
export function checkoutMemberClickOnEditMemberAddress(params) {
    return {
        evid: 827,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'ordersViewOrderDetailsPageSf' event (evid: 128)
 *
 * Event description: view order details in order history page
 *
 * @param {ordersViewOrderDetailsPageSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - list of all catalog app ids
 * @property {string} contact_id - contact_id
 * @property {number} itemsCount - number of items in the order
 * @property {string} orderId - orderId
 * @property {string} origin - order_page
 * @property {GUID} site_member_id - member id
 * @return {LogObject<ordersViewOrderDetailsPageSfParams>} LogObject<ordersViewOrderDetailsPageSfParams>
 */
export function ordersViewOrderDetailsPageSf(params) {
    return {
        evid: 128,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'giftCardCheckoutClickApply' event (evid: 529)
 *
 * Event description: when visitor checks / unchecks the Gift Card checkbox in Payment stage of Checkout
 *
 * @param {giftCardCheckoutClickApplyParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName
 * @property {GUID} cartId - cart id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isMember - true if visitor is member
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<giftCardCheckoutClickApplyParams>} LogObject<giftCardCheckoutClickApplyParams>
 */
export function giftCardCheckoutClickApply(params) {
    return {
        evid: 529,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'ordersViewOrderHistoryPageSf' event (evid: 127)
 *
 * Event description: view order history page (when it is with orders or without)
 *
 * @param {ordersViewOrderHistoryPageSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} catalogAppId - list of all catalog app ids
 * @property {string} contact_id - contact_id
 * @property {number} itemsCount - number of orders in the page (for without orders it will be 0)
 * @property {string} origin - origin
 * @property {GUID} site_member_id - member id
 * @return {LogObject<ordersViewOrderHistoryPageSfParams>} LogObject<ordersViewOrderHistoryPageSfParams>
 */
export function ordersViewOrderHistoryPageSf(params) {
    return {
        evid: 127,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutShowMerchantPaymentPopupSf' event (evid: 164)
 *
 * Event description: When the user connects to his site and tries to do checkout when the payment method doesn't define in the site's settings
 *
 * @param {checkoutShowMerchantPaymentPopupSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} catalogAppId - list of all catalog app ids
 * @property {GUID} ecomId - ecom_id
 * @property {string} mode - mode
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @return {LogObject<checkoutShowMerchantPaymentPopupSfParams>} LogObject<checkoutShowMerchantPaymentPopupSfParams>
 */
export function checkoutShowMerchantPaymentPopupSf(params) {
    return {
        evid: 164,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'selectPaymentCategory' event (evid: 200)
 *
 * Event description: Select payment category SF cashier - select radio button
 *
 * @param {selectPaymentCategoryParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} paymentCategory - CreditCard/Ewallet
 * @property {string} paymentMethod - authorize-net/Stripe
 * @return {LogObject<selectPaymentCategoryParams>} LogObject<selectPaymentCategoryParams>
 */
export function selectPaymentCategory(params) {
    return {
        evid: 200,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'cartMinimumOrderMessageIsShownInCart' event (evid: 653)
 *
 * Event description: Minimum order message is shown in cart
 *
 * @param {cartMinimumOrderMessageIsShownInCartParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {boolean} buttonEnabled - true - if the button is enabled false -if button is disabled
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - only in EP
 * @property {string} currency - the currency that was shown in the message
 * @property {number} diffLong - The diff between the relevant order value and the minimum order threshold multiplied by 10000
 * @property {GUID} ecomId - ecom_id
 * @property {number} minimumValueLong - the minimum order threshold multiplied by 10000
 * @return {LogObject<cartMinimumOrderMessageIsShownInCartParams>} LogObject<cartMinimumOrderMessageIsShownInCartParams>
 */
export function cartMinimumOrderMessageIsShownInCart(params) {
    return {
        evid: 653,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnCheckout' event (evid: 114)
 *
 * Event description: Click on checkout from Cart page. since june 2019 also sent from OneApp with origin = 'OA StoreFront'
 *
 * @param {clickOnCheckoutParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount - Numbers of items in cart
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} is_member - true is the visitor signed in as a member, false otherwise
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
 * @property {string} origin - origin
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {string} validationMessage - jason with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @return {LogObject<clickOnCheckoutParams>} LogObject<clickOnCheckoutParams>
 */
export function clickOnCheckout(params) {
    return {
        evid: 114,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'removeACoupon' event (evid: 118)
 *
 * @param {removeACouponParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart/order
 * @property {string} appName
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {string} couponCode
 * @property {string} couponId - coupon_id
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isMember
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
 * @property {string} origin
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<removeACouponParams>} LogObject<removeACouponParams>
 */
export function removeACoupon(params) {
    return {
        evid: 118,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutRedirectToCheckoutFromExpressCheckout' event (evid: 845)
 *
 * Event description: When UoU redirects to Ecom's checkout from the express checkout (Paypal, Apple Pay, etc).
 * This can happen when there is a mandatory field in the checkout, terms to accept, changes needed in the shipping section ...
 *
 * @param {checkoutRedirectToCheckoutFromExpressCheckoutParams} params - The parameters for this event
 * @property {GUID} cartId - cart_id
 * @property {GUID} checkoutId - checkout_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} reason - The redirect's reason
 * @return {LogObject<checkoutRedirectToCheckoutFromExpressCheckoutParams>} LogObject<checkoutRedirectToCheckoutFromExpressCheckoutParams>
 */
export function checkoutRedirectToCheckoutFromExpressCheckout(params) {
    return {
        evid: 845,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutMemberMemberAddressCreated' event (evid: 824)
 *
 * Event description: when a member adds a new address
 *
 * @param {checkoutMemberMemberAddressCreatedParams} params - The parameters for this event
 * @property {GUID} addressServiceId - address_id
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical) etc
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isSetAsDefaultChecked - true - was checked as default (new default or from last edit)
 * @property {string} stage - in which stage the visitor add new address - contact-details or billing
 * @return {LogObject<checkoutMemberMemberAddressCreatedParams>} LogObject<checkoutMemberMemberAddressCreatedParams>
 */
export function checkoutMemberMemberAddressCreated(params) {
    return {
        evid: 824,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutPageLoad' event (evid: 36)
 *
 * Event description: this event indicates witch "checkout page" was presented to the user. there are 6 types that depends on: 1.cart_type : Digital/ Physical/ mixed (Digital &Physical)  2. shipping method : shipping /store pickup / non. 3. flow_type: quick / full
 *
 * @param {checkoutPageLoadParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName - app_name
 * @property {string} buyerLanguage - buyer Language. Not exist in OOI checkout
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} channelType - what is the channel type (web/back office..)
 * @property {GUID} checkoutId - checkout_id
 * @property {string} checkoutType - in viewer / out of viewer
 * @property {string} contactId - Buyer's contact ID. take from: Checkout.Chekout object.buyerInfo.contactId
 * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
 * @property {number} dintinctNumItems - count distinct item_id. Not exist in OOI checkout
 * @property {string} dintinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}. Not exist in OOI checkout
 * @property {GUID} ecomId - ecom_id
 * @property {string} first_stage - first stage open in checkout page
 * @property {string} flowType - 'quick flow' / 'full flow'. For OOI Checkout-   fastFlow = 'fast flow'
 * @property {boolean} isBuyNowPayLaterOption - is buy now pay later option exist. Not exist in OOI checkout
 * @property {boolean} isBuyerNote - does a buyes note exist. Not exist in OOI checkout
 * @property {boolean} isCalculationErrors - does calculation errors exist. Not exist in OOI checkout
 * @property {boolean} isDiscountPriceSummary - does discount exist in price summary. Not exist in OOI checkout
 * @property {boolean} isGiftCard - does gift card is available in the checkout
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {boolean} isOutOfIframe - only send in the ooi flow. therefore, null = false
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {boolean} isPolicy - has policies in checkout
 * @property {boolean} is_promo_code - is promo code (coupon) option visible in the cart & checkout
 * @property {boolean} isShippingPriceSummary - does shipping exist in price summary
 * @property {boolean} isTaxPriceSummary - does tax exist in price summary. Not exist in OOI checkout
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {boolean} isWithTimeSlots - True/false. for now - only for Restaurant. Does the checkout have an delivery option with a time slot?
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} itemsQuantity - sum of total items quantity. Not exist in OOI checkout
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}. Not exist in OOI checkout
 * @property {number} numLineItems - total number of line items. Not exist in OOI checkout
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}. Not exist in OOI checkout
 * @property {number} num_of_paymet_providers - How many payment providers does the site has connected. Not exist in OOI checkout
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor. Not exist in OOI checkout
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order. Not exist in OOI checkout
 * @property {string} origin - the component / page that the visitor came from to the checkout, like product page, cart page, etc.
 * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} paymentProviders - array of payment providers connected to the site - From 1.4.23
 * @property {string} paymet_providers - array of payment providers connected to the site - WRONG FIELD
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {boolean} savedAddress - true if the member has saved address. Not exist in OOI checkout
 * @property {string} selectedCarrierServiceOption - Taken from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption. Not exist in OOI checkout
 * @property {string} selectedDeliveryOption - what was the selected delivery option. Not exist in OOI checkout
 * @property {string} shippingCity - buyer city when viewing the checkout. Not exist in OOI checkout
 * @property {string} shippingCountry - buyer country code when viewing the checkout
 * @property {string} shippingMethodType - what are the shipping option that are presented(shipping /store pickup / none). Not exist in OOI checkout
 * @property {string} siteLanguage - site Language. Not exist in OOI checkout
 * @property {string} validationMessage - JSON with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @return {LogObject<checkoutPageLoadParams>} LogObject<checkoutPageLoadParams>
 */
export function checkoutPageLoad(params) {
    return {
        evid: 36,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutClickOnCtaInTotalsHaveBeenUpdatedPopup' event (evid: 840)
 *
 * Event description: when the user clicks on the CTA in the pop up
 *
 * @param {checkoutClickOnCtaInTotalsHaveBeenUpdatedPopupParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} checkoutId - checkout_id
 * @property {string} flowType - 'quick flow' / 'full flow'. For OOI Checkout-   fastFlow = 'fast flow'
 * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<checkoutClickOnCtaInTotalsHaveBeenUpdatedPopupParams>} LogObject<checkoutClickOnCtaInTotalsHaveBeenUpdatedPopupParams>
 */
export function checkoutClickOnCtaInTotalsHaveBeenUpdatedPopup(params) {
    return {
        evid: 840,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickLogoutInCheckout' event (evid: 601)
 *
 * Event description: when site member clicks to logout in checkout, opening logout modal
 *
 * @param {clickLogoutInCheckoutParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {GUID} owner_id
 * @property {boolean} savedAddress - true if the member has saved address
 * @return {LogObject<clickLogoutInCheckoutParams>} LogObject<clickLogoutInCheckoutParams>
 */
export function clickLogoutInCheckout(params) {
    return {
        evid: 601,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'thankYouPageClickOnLinkOnLineItem' event (evid: 175)
 *
 * Event description: When the buyer clicks on one of the item’s links on Thank you page
 *
 * @param {thankYouPageClickOnLinkOnLineItemParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} catalogItemId - order.lineItems.catalogReference.catalogItemId
 * @property {string} checkoutId - Order.checkoutId
 * @property {GUID} ecomId - ecom_id
 * @property {string} itemType - Order.lineItems.itemType
 * @property {string} actionName - Action name (download/print/add to calendar..)
 * @property {string} orderId - orderId
 * @return {LogObject<thankYouPageClickOnLinkOnLineItemParams>} LogObject<thankYouPageClickOnLinkOnLineItemParams>
 */
export function thankYouPageClickOnLinkOnLineItem(params) {
    return {
        evid: 175,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'storesScreenRenderedOa' event (evid: 212)
 *
 * Event description: when specific stores screen(product_list, order_list, product, product_new, order) was rendered OneApp. is not sent for rendering coupons
 *
 * @param {storesScreenRenderedOaParams} params - The parameters for this event
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {boolean} hasPaymentMethod - for orders screen - true if user has at least one payment method connected
 * @property {boolean} isOwner - true for merchant, false for member
 * @property {boolean} isPremium - for orders screen. true if user is premium (and do not see a bunner to upgrade)
 * @property {string} origin - merchantView / memberView / oneAppDashboard
 * @property {GUID} owner_id - id of site's owner
 * @property {string} pageName - current rendered page (products, orders, product, product_new, order, dashboard, settings, shipping..., tax...)/ cannot_sell / view_store /local delivery / local delivery areas
 * @property {string} paymentStatus - paymentStatus
 * @property {string} previousPage - where the user came from (stores_home - for tabs in StoresHome, previous page_name for others)
 * @property {GUID} id - order id
 * @property {string} state - full/empty/filtered
 * @return {LogObject<storesScreenRenderedOaParams>} LogObject<storesScreenRenderedOaParams>
 */
export function storesScreenRenderedOa(params) {
    return {
        evid: 212,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutMemberClickOnAddNewAddress' event (evid: 826)
 *
 * Event description: when a member click on create member address (or - add new address)
 *
 * @param {checkoutMemberClickOnAddNewAddressParams} params - The parameters for this event
 * @property {GUID} addressServiceId - address_id
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical) etc
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} origin - from where the uou clicked on add new address - dropdown / error message
 * @property {string} stage - in which stage the visitor clicked on add new address - contact-details or billing
 * @return {LogObject<checkoutMemberClickOnAddNewAddressParams>} LogObject<checkoutMemberClickOnAddNewAddressParams>
 */
export function checkoutMemberClickOnAddNewAddress(params) {
    return {
        evid: 826,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnContinueShoppingFromCart' event (evid: 120)
 *
 * Event description: Click on continue shopping from checkout/cart
 *
 * @param {clickOnContinueShoppingFromCartParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - number of all additional fees in the order
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} origin - from cart/checkout page
 * @return {LogObject<clickOnContinueShoppingFromCartParams>} LogObject<clickOnContinueShoppingFromCartParams>
 */
export function clickOnContinueShoppingFromCart(params) {
    return {
        evid: 120,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'editorChangeCartIconSfe' event (evid: 820)
 *
 * Event description: select a cart icon in the mini cart settings
 *
 * @param {editorChangeCartIconSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} type - icon type
 * @return {LogObject<editorChangeCartIconSfeParams>} LogObject<editorChangeCartIconSfeParams>
 */
export function editorChangeCartIconSfe(params) {
    return {
        evid: 820,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'cartCartIconLoaded' event (evid: 546)
 *
 * Event description: cart icon loaded
 *
 * @param {cartCartIconLoadedParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isMobileFriendly - true if mobile friendly, false otherwise
 * @property {string} navigationClick - mini cart / cart page
 * @return {LogObject<cartCartIconLoadedParams>} LogObject<cartCartIconLoadedParams>
 */
export function cartCartIconLoaded(params) {
    return {
        evid: 546,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'cartShowMerchantShippingPopup' event (evid: 173)
 *
 * Event description: Show shipping popup - no shipping rule for destination
 *
 * @param {cartShowMerchantShippingPopupParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} ecomId - ecom_id
 * @property {string} mode - mode
 * @property {string} origin - where the modal pops up (cart / product page...)
 * @property {string} type - merchant pop-up / buyer pop-up
 * @return {LogObject<cartShowMerchantShippingPopupParams>} LogObject<cartShowMerchantShippingPopupParams>
 */
export function cartShowMerchantShippingPopup(params) {
    return {
        evid: 173,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickPlaceOrder' event (evid: 168)
 *
 * Event description: click on place order (client event). since june 2019 also from OneApp (leads to cashier screen to choose payment method and pay)
 *
 * @param {clickPlaceOrderParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order. Not exist in OOI checkout
 * @property {string} appName - app_name
 * @property {string} buyerLanguage - buyer Language. Not exist in OOI checkout
 * @property {GUID} cartId - cart_id
 * @property {string} cartType
 * @property {string} catalogAppId - catalog_app_id
 * @property {string} channelType - what is the channel type
 * @property {GUID} checkoutId - checkout_id
 * @property {string} checkoutType - in viewer / out of viewer. Not exist in OOI checkout
 * @property {string} contactId - Buyer's contact ID. taken from: Checkout.Chekout object.buyerInfo.contactId
 * @property {string} couponCode - coupon_code. Not exist in OOI checkout
 * @property {boolean} customFieldMandatory - true - if custom field was mandatory on checkout
 * @property {string} customFieldsTitle - title of custom field (can be a list if there is more than one field
 * @property {number} dintinctNumItems - count distinct item_id. Not exist in OOI checkout
 * @property {string} distinctNumItemsPerCatalog - Json - sum of total count distinct item_id per catalog - example: {“stores”: 2, “bookings”: 3}. Not exist in OOI checkout
 * @property {GUID} ecomId - ecom_id
 * @property {string} first_stage - first stage open in checkout page
 * @property {string} flowType - 'quick flow' / 'full flow'. For OOI Checkout- fastFlow = 'fast flow', visitorPickupFlow = 'visitor pickup flow', memberPickupFlow = 'member pickup flow', visitorShippingFlow = 'visitor shipping flow', memberShippingFlow = 'member shipping flow', nonShippableFlow = 'non shippable flow', unrecognizedFlow = 'unrecognized Flow',
 * @property {string} giftCardCode - Not exist in OOI checkout
 * @property {string} giftCardId - gift_card_id. Not exist in OOI checkout
 * @property {boolean} hasCustomField - Not exist in OOI checkout
 * @property {boolean} hasPaymentMethod - true / false. Not exist in OOI checkout
 * @property {boolean} isBuyNowPayLaterOption - is buy now pay later option exist. Not exist in OOI checkout
 * @property {boolean} isBuyerNote - does a buyes note exist. Not exist in OOI checkout
 * @property {boolean} isCalculationErrors - does calculation errors exist. Not exist in OOI checkout
 * @property {boolean} isCouponPriceSummary - does coupon exist in price summary. Not exist in OOI checkout
 * @property {boolean} isDiscountPriceSummary - does discount (any kind of discount)  exist in price summary. Not exist in OOI checkout
 * @property {boolean} isDiscountRulePriceSummary - does discount rule exist in price summary. Not exist in OOI checkout
 * @property {boolean} isGiftCard - does gift card is available in the checkout
 * @property {boolean} is_member
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {boolean} isPolicy - has policies in checkout
 * @property {boolean} isPremium - Not exist in OOI checkout
 * @property {boolean} is_promo_code - is promo code (coupon) option visible in the cart & checkout
 * @property {boolean} isShippingPriceSummary - does shipping exist in price summary. Not exist in OOI checkout
 * @property {boolean} isTaxPriceSummary - does tax exist in price summary. Not exist in OOI checkout
 * @property {boolean} is_with_ewallet_payment - does the site has an ewallet payment connected
 * @property {boolean} is_with_offline_payment - does the site has an offline payment connected
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} itemsQuantity - sum of total items quantity. Not exist in OOI checkout
 * @property {string} itemsQuantityPerCatalog - Json - sum of total items quantity per catalog - example: {“stores”: 9, “bookings”: 7}. Not exist in OOI checkout
 * @property {string} numLineItemsPerCatalog - Json - number of line items per catalog - example: {“stores”: 3, “bookings”: 4}
 * @property {number} numOfLineItems - number of line items (# of products) in cart included the product just added
 * @property {number} num_of_paymet_providers - How many payment providers does the site has connected. Not exist in OOI checkout
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} origin - the component / page that the visitor came from to the checkout, like product page, cart page, etc.
 * @property {string} originType - the type of flow that lead to the checkout, like buy now, paypal, etc.
 * @property {GUID} owner_id
 * @property {string} paymentMethod - authorize-net/Stripe
 * @property {string} paymet_providers - array of payment providers connected to the store site
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {string} selectedCarrierServiceOption - Take from: Checkout.Chekout object.Shipping Info.selectedCarrierServiceOption
 * @property {string} selectedDeliveryOption - what was the selected delivery option
 * @property {string} shippingCity - buyer city. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.city
 * @property {string} shippingCountry - buyer country code. Take from: Checkout.Chekout object.Shipping Info. shipping destenation.address.country
 * @property {string} shippingMethodType - what was the selected shipping option (shipping /store pickup / none)
 * @property {string} siteLanguage - site Language
 * @property {GUID} siteMemberId
 * @property {string} validationMessage - JSON with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @property {string} validationSpi - jason with the validation that appear in the checkout while loaded. {type - warning/error, is_line_item - true/false, message - what the uou saw}
 * @return {LogObject<clickPlaceOrderParams>} LogObject<clickPlaceOrderParams>
 */
export function clickPlaceOrder(params) {
    return {
        evid: 168,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'giftCardCheckoutClickOnCheckbox' event (evid: 527)
 *
 * Event description: in the old checkout - when a visitor checks / unchecks the Gift Card checkbox in the Payment stage. in the new checkout (out of Iframe) -  when a visitor clicks on "Redeem a gift card" (first step of applying gift card). Notice - the old flow have both the opinion to check/uncheck gift card. the new only have click to open the flow (without closing).
 *
 * @param {giftCardCheckoutClickOnCheckboxParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isMember - true if visitor is member
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} value - behavior type. in the old checkout - unchecked/check. in the new checkout - null (no checkbox action)
 * @return {LogObject<giftCardCheckoutClickOnCheckboxParams>} LogObject<giftCardCheckoutClickOnCheckboxParams>
 */
export function giftCardCheckoutClickOnCheckbox(params) {
    return {
        evid: 527,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutMemberMemberAddressUpdated' event (evid: 825)
 *
 * Event description: when a member updates (edits) an existing address
 *
 * @param {checkoutMemberMemberAddressUpdatedParams} params - The parameters for this event
 * @property {GUID} addressId - address_id
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical) etc
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isDefault - was set to default
 * @property {boolean} isSetAsDefaultChecked - true - was checked as default (new default or from last edit)
 * @property {string} stage - in which stage the visitor change/edit - contact-details or billing
 * @return {LogObject<checkoutMemberMemberAddressUpdatedParams>} LogObject<checkoutMemberMemberAddressUpdatedParams>
 */
export function checkoutMemberMemberAddressUpdated(params) {
    return {
        evid: 825,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'couponApplied' event (evid: 119)
 *
 * @param {couponAppliedParams} params - The parameters for this event
 * @property {string} appName
 * @property {GUID} cartId
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {string} name
 * @property {string} couponCode
 * @property {string} couponId
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isMember
 * @property {boolean} isOwner
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} origin
 * @property {GUID} owner_id
 * @property {number} total_long
 * @property {string} type
 * @return {LogObject<couponAppliedParams>} LogObject<couponAppliedParams>
 */
export function couponApplied(params) {
    return {
        evid: 119,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnReturnToCheckoutInLogoutModal' event (evid: 603)
 *
 * Event description: buyer clicks on "return to checkout" or X in logout modal in checkout to close it
 *
 * @param {clickOnReturnToCheckoutInLogoutModalParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName
 * @property {GUID} cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {boolean} savedAddress - true if the member has saved address
 * @property {GUID} siteMemberId - member id
 * @return {LogObject<clickOnReturnToCheckoutInLogoutModalParams>} LogObject<clickOnReturnToCheckoutInLogoutModalParams>
 */
export function clickOnReturnToCheckoutInLogoutModal(params) {
    return {
        evid: 603,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'deliveryMethodSet' event (evid: 163)
 *
 * Event description: Click on continue to payment (on web) since June 2019 also sent from OneApp (leads to "Review Order" (placeOrder) screen)
 *
 * @param {deliveryMethodSetParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {number} optionscount - number of payment options
 * @property {GUID} ecomId - ecom_id
 * @property {number} selectedoptionindex - index of selected option
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {boolean} isSetFromSlot - whether the delivery method was set from slot
 * @property {boolean} isWithTimeSlots - True/false. right now only for Restaurant. Does the selected delivery option has a time slot option?
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} methodType - pickup/non-pickup
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} shippingRuleOptions - all the shipping types presented in the modal
 * @property {string} selectedoptiontype - type of option selected
 * @return {LogObject<deliveryMethodSetParams>} LogObject<deliveryMethodSetParams>
 */
export function deliveryMethodSet(params) {
    return {
        evid: 163,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickApplyCoupon' event (evid: 112)
 *
 * Event description: after entering promo code click on Apply. since june 2019 can be sent also from OA StoreFront
 *
 * @param {clickApplyCouponParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart/order
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {string} couponCode - coupon_code
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isMember - true if visitor is member
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart/order
 * @property {string} origin - shopping cart / checkout
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<clickApplyCouponParams>} LogObject<clickApplyCouponParams>
 */
export function clickApplyCoupon(params) {
    return {
        evid: 112,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'giftCardCheckoutCodeApplied' event (evid: 535)
 *
 * Event description: when Gift Card Code was successfully applied in Payment stage of Checkout
 *
 * @param {giftCardCheckoutCodeAppliedParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName
 * @property {GUID} cartId - cart id
 * @property {string} catalogAppId - List of distinct checkout.lineItems.itemType
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} giftCardId - gift_card_id
 * @property {boolean} isCartPaidOnlyWithGiftCard - True if payments options are hidden due to gift card fully cover the payment (with coupon or without)
 * @property {boolean} isMember - true if visitor is member
 * @property {string} itemType - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<giftCardCheckoutCodeAppliedParams>} LogObject<giftCardCheckoutCodeAppliedParams>
 */
export function giftCardCheckoutCodeApplied(params) {
    return {
        evid: 535,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'bisRequestIsAlreadyCreatedError' event (evid: 27)
 *
 * Event description: When a user clicks the submit button after a request is already made. and he gets an error for it
 *
 * @param {bisRequestIsAlreadyCreatedErrorParams} params - The parameters for this event
 * @property {GUID} appId - the app Id of the catalog
 * @property {string} catalogAppId - catalog app id
 * @property {GUID} catalogInstanceId - In case of stores (store_id)
 * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
 * @property {string} options - map of strings of the options chosen in the requested item
 * @return {LogObject<bisRequestIsAlreadyCreatedErrorParams>} LogObject<bisRequestIsAlreadyCreatedErrorParams>
 */
export function bisRequestIsAlreadyCreatedError(params) {
    return {
        evid: 27,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'removedProductFromCartSf' event (evid: 115)
 *
 * Event description: Removed product from cart SF. since june 2019 also for OneApp StoreFront (member view)
 *
 * @param {removedProductFromCartSfParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart id
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount - origin
 * @property {GUID} ecomId - ecom_id
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} origin - number of items in the cart
 * @property {GUID} owner_id - id of site's owner. since june 2019
 * @property {string} productId - product_id
 * @property {string} productType - digital / physical
 * @return {LogObject<removedProductFromCartSfParams>} LogObject<removedProductFromCartSfParams>
 */
export function removedProductFromCartSf(params) {
    return {
        evid: 115,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutClickOnCallToActionInMerchantPopUpSf' event (evid: 169)
 *
 * Event description: click on call to action (upgrade / set payment) in merchant pop-up
 *
 * @param {checkoutClickOnCallToActionInMerchantPopUpSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} ecomId - ecom_id
 * @property {string} notificationType - payments/upgrade/shipping
 * @property {string} type - merchant pop-up / buyer pop-up
 * @return {LogObject<checkoutClickOnCallToActionInMerchantPopUpSfParams>} LogObject<checkoutClickOnCallToActionInMerchantPopUpSfParams>
 */
export function checkoutClickOnCallToActionInMerchantPopUpSf(params) {
    return {
        evid: 169,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'ordersClickInOrderHistoryPageSf' event (evid: 129)
 *
 * Event description: UoU clicks that are coming from the order_history page
 *
 * @param {ordersClickInOrderHistoryPageSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} catalogAppId - list of all catalog app ids
 * @property {string} click_type - go_shopping / track_order / download / view_invoice
 * @property {string} contact_id - contact_id
 * @property {string} orderId - orderId
 * @property {string} origin - order_history_page / order_details_page
 * @property {string} productId - only for click on "Track item" in order details page
 * @property {GUID} site_member_id - member id
 * @return {LogObject<ordersClickInOrderHistoryPageSfParams>} LogObject<ordersClickInOrderHistoryPageSfParams>
 */
export function ordersClickInOrderHistoryPageSf(params) {
    return {
        evid: 129,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'deleteNoteToSellerSf' event (evid: 123)
 *
 * Event description: buyer clicks on 'delete note to seller' in cart page
 *
 * @param {deleteNoteToSellerSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart id
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @return {LogObject<deleteNoteToSellerSfParams>} LogObject<deleteNoteToSellerSfParams>
 */
export function deleteNoteToSellerSf(params) {
    return {
        evid: 123,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnShippingDestinationInCartPageSf' event (evid: 223)
 *
 * @param {clickOnShippingDestinationInCartPageSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId
 * @property {GUID} ecomId - ecom_id
 * @property {string} shippingDestinationCountry
 * @property {string} shippingDestinationState - shipping destination state
 * @return {LogObject<clickOnShippingDestinationInCartPageSfParams>} LogObject<clickOnShippingDestinationInCartPageSfParams>
 */
export function clickOnShippingDestinationInCartPageSf(params) {
    return {
        evid: 223,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'editorChangeStyleColorSfe' event (evid: 812)
 *
 * Event description: upon changing a store style or color
 *
 * @param {editorChangeStyleColorSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} component_id - grid gallery, slider galeery, product page,CurrencyConverter, AvalaraTax
 * @property {string} editorMode - mobile / desktop
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media
 * @property {string} parameter - facebook,tweeter, image scaling, navigation position
 * @property {string} value - behavior type
 * @return {LogObject<editorChangeStyleColorSfeParams>} LogObject<editorChangeStyleColorSfeParams>
 */
export function editorChangeStyleColorSfe(params) {
    return {
        evid: 812,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'membersClickChangeInCheckoutStages' event (evid: 46)
 *
 * Event description: click to 'change' autofill info in the checkout process
 *
 * @param {membersClickChangeInCheckoutStagesParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} stage - which stage in the wishlist installation process
 * @return {LogObject<membersClickChangeInCheckoutStagesParams>} LogObject<membersClickChangeInCheckoutStagesParams>
 */
export function membersClickChangeInCheckoutStages(params) {
    return {
        evid: 46,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnCheckoutWithEWallet' event (evid: 113)
 *
 * Event description: buyer clicks on checkout with e-wallwt in cart page
 *
 * @param {clickOnCheckoutWithEWalletParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in cart
 * @property {string} appName - app_name
 * @property {GUID} cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount - Numbers of items in cart
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} is_with_ewallet_payment - does the store has an ewallet payment connected (and displaying in cart)
 * @property {boolean} is_with_offline_payment - does the store has an offline payment connected
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor
 * @property {number} numberOfAdditionalFees - number of all additional fees in the cart
 * @property {string} orig_shipping_method - current shipping method in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
 * @property {string} origin - origin
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {string} shippingMethodType - shipping /store pickup / none
 * @property {string} type - button / tooltip / banner
 * @return {LogObject<clickOnCheckoutWithEWalletParams>} LogObject<clickOnCheckoutWithEWalletParams>
 */
export function clickOnCheckoutWithEWallet(params) {
    return {
        evid: 113,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutErrorTrackingForDevelopers' event (evid: 713)
 *
 * Event description: Debug for developers
 *
 * @param {checkoutErrorTrackingForDevelopersParams} params - The parameters for this event
 * @property {string} data - data
 * @property {string} error - error
 * @return {LogObject<checkoutErrorTrackingForDevelopersParams>} LogObject<checkoutErrorTrackingForDevelopersParams>
 */
export function checkoutErrorTrackingForDevelopers(params) {
    return {
        evid: 713,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'giftCardCheckoutRemoveCode' event (evid: 536)
 *
 * Event description: when visitor clicks "remove" after applying Gift Card Codein Payment stage of Checkout
 *
 * @param {giftCardCheckoutRemoveCodeParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName
 * @property {GUID} cartId
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} giftCardId
 * @property {boolean} isMember - true if visitor is member
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<giftCardCheckoutRemoveCodeParams>} LogObject<giftCardCheckoutRemoveCodeParams>
 */
export function giftCardCheckoutRemoveCode(params) {
    return {
        evid: 536,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutClickOnContinueInCheckoutProcess' event (evid: 29)
 *
 * Event description: When the user clicks on “continue”  on a specific stage in checkout process
 *
 * @param {checkoutClickOnContinueInCheckoutProcessParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} previousStage - the closed stage - payment / shippingDetails / deliveryMethod / payment-method / pickupDetails / shipping-method / customerDetails
 * @property {string} stage - which stage in the wishlist installation process
 * @return {LogObject<checkoutClickOnContinueInCheckoutProcessParams>} LogObject<checkoutClickOnContinueInCheckoutProcessParams>
 */
export function checkoutClickOnContinueInCheckoutProcess(params) {
    return {
        evid: 29,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutClickOnCheckoutPolicies' event (evid: 712)
 *
 * Event description: When the user clicks on one of the checkout policies
 *
 * @param {checkoutClickOnCheckoutPoliciesParams} params - The parameters for this event
 * @property {string} appName - app_name (added from 21/03/23)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} linkLocation - the location of the link. The options are: footer / form
 * @property {string} policyType - on which policy the user clicked. The options: terms and conditions / privacy policy / return policy / digital item policy / contact us / custom policy
 * @return {LogObject<checkoutClickOnCheckoutPoliciesParams>} LogObject<checkoutClickOnCheckoutPoliciesParams>
 */
export function checkoutClickOnCheckoutPolicies(params) {
    return {
        evid: 712,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'editorClickOnChangeLinkInSettingsSfe' event (evid: 196)
 *
 * Event description: when the user click on the change link in the settings of the cart or the thank you page / my orders..
 *
 * @param {editorClickOnChangeLinkInSettingsSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} component_id
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media,continue shopping / empty state / back to store..
 * @property {string} link - current navigation link
 * @return {LogObject<editorClickOnChangeLinkInSettingsSfeParams>} LogObject<editorClickOnChangeLinkInSettingsSfeParams>
 */
export function editorClickOnChangeLinkInSettingsSfe(params) {
    return {
        evid: 196,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'editorChangeMiniCartBehaviorSfe' event (evid: 822)
 *
 * Event description: select a behavior for click on the mini cart in mini cart settings
 *
 * @param {editorChangeMiniCartBehaviorSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} parameter - parameter
 * @property {string} value - behavior type (openMiniCart/openCartPage)
 * @return {LogObject<editorChangeMiniCartBehaviorSfeParams>} LogObject<editorChangeMiniCartBehaviorSfeParams>
 */
export function editorChangeMiniCartBehaviorSfe(params) {
    return {
        evid: 822,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToOpenStoreManagerSfe' event (evid: 814)
 *
 * Event description: clicking 're-order products in collection' (store manager is opened in collection page)
 *
 * @param {clickToOpenStoreManagerSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} component_id - grid gallery, slider galeery, product page
 * @property {string} targetPage - product list / product / dashboard / ....
 * @return {LogObject<clickToOpenStoreManagerSfeParams>} LogObject<clickToOpenStoreManagerSfeParams>
 */
export function clickToOpenStoreManagerSfe(params) {
    return {
        evid: 814,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutShowHideItemsSectionInMobileView' event (evid: 838)
 *
 * Event description: When a uou on a mobile device click on the items section to expand or collapse it and see/unsee the list of all the items at the bottom of the checkout.
 *
 * @param {checkoutShowHideItemsSectionInMobileViewParams} params - The parameters for this event
 * @property {string} action - show/hide
 * @property {string} catalogAppId - list of catalog_app_id in the checkout
 * @property {string} purchaseFlowId - purchaseFlowId
 * @return {LogObject<checkoutShowHideItemsSectionInMobileViewParams>} LogObject<checkoutShowHideItemsSectionInMobileViewParams>
 */
export function checkoutShowHideItemsSectionInMobileView(params) {
    return {
        evid: 838,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToViewCartPage' event (evid: 130)
 *
 * Event description: click to view cart page. since june 2019 also for OneApp Store front
 *
 * @param {clickToViewCartPageParams} params - The parameters for this event
 * @property {string} appName
 * @property {GUID} cartId
 * @property {string} cartType
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isNavigateCart
 * @property {string} origin
 * @property {GUID} owner_id
 * @property {string} viewMode
 * @return {LogObject<clickToViewCartPageParams>} LogObject<clickToViewCartPageParams>
 */
export function clickToViewCartPage(params) {
    return {
        evid: 130,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutErrorWhenApplyingAGiftCard' event (evid: 717)
 *
 * Event description: when a uou has an error while applying gift card in the checkout.
 * (Only for the OOO checkout, for the old checkout data - check 130:24)
 *
 * @param {checkoutErrorWhenApplyingAGiftCardParams} params - The parameters for this event
 * @property {string} appName - app name
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {string} errorCode - error code
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isMember - is_member
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<checkoutErrorWhenApplyingAGiftCardParams>} LogObject<checkoutErrorWhenApplyingAGiftCardParams>
 */
export function checkoutErrorWhenApplyingAGiftCard(params) {
    return {
        evid: 717,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutLoadingCheckoutPageFailForDev' event (evid: 719)
 *
 * Event description: when the checkout is corrupted
 *
 * @param {checkoutLoadingCheckoutPageFailForDevParams} params - The parameters for this event
 * @return {LogObject<checkoutLoadingCheckoutPageFailForDevParams>} LogObject<checkoutLoadingCheckoutPageFailForDevParams>
 */
export function checkoutLoadingCheckoutPageFailForDev(params) {
    return {
        evid: 719,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickToViewProductFromCartPageOa' event (evid: 706)
 *
 * Event description: Click to View product (from cart page)  OA
 *
 * @param {clickToViewProductFromCartPageOaParams} params - The parameters for this event
 * @property {string} cartId - cartId
 * @property {string} catalogAppId - Stores/bookings App id
 * @property {string} catalogItemId - productId in case of Stores, Bookingid in case od bookings
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} hasOptions - has_options
 * @property {string} itemType - productType in case of Stores
 * @property {string} origin - catalog_OA / cart_OA (from OneApp Stores front) / quick-view
 * @return {LogObject<clickToViewProductFromCartPageOaParams>} LogObject<clickToViewProductFromCartPageOaParams>
 */
export function clickToViewProductFromCartPageOa(params) {
    return {
        evid: 706,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickOnMyOrdersInThankYouPageOaStoreFront' event (evid: 187)
 *
 * Event description: Click on "My Orders" in Thank you page OA StoreFront
 *
 * @param {clickOnMyOrdersInThankYouPageOaStoreFrontParams} params - The parameters for this event
 * @property {string} cartId - cartId
 * @property {string} catalogAppId - Stores/bookings App id
 * @property {string} orderId - orderId
 * @return {LogObject<clickOnMyOrdersInThankYouPageOaStoreFrontParams>} LogObject<clickOnMyOrdersInThankYouPageOaStoreFrontParams>
 */
export function clickOnMyOrdersInThankYouPageOaStoreFront(params) {
    return {
        evid: 187,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'bisClickOnNotifyMeButtonToOpenModal' event (evid: 25)
 *
 * Event description: When a user clicks on notify me button to open modal.
 * if eligible = true, then the modal should open
 * if eligible = false, then the button is disabled and the user will get an error.
 *
 * @param {bisClickOnNotifyMeButtonToOpenModalParams} params - The parameters for this event
 * @property {GUID} appId - the app Id of the catalog
 * @property {string} catalogAppId - catalog app id
 * @property {GUID} catalogInstanceId - In case of stores (store_id)
 * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
 * @property {boolean} eligible - true (all options selected/no options ->eligible  to open modal) false (not all the options are selected - not eligible - shows error)
 * @property {string} option - map of strings of the options chosen in the requested item
 * @property {string} origin - product page / quick view / gallery
 * @return {LogObject<bisClickOnNotifyMeButtonToOpenModalParams>} LogObject<bisClickOnNotifyMeButtonToOpenModalParams>
 */
export function bisClickOnNotifyMeButtonToOpenModal(params) {
    return {
        evid: 25,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickManageProductInCartOaStoreFront' event (evid: 185)
 *
 * Event description: Click Manage Product in cart OA StoreFront
 *
 * @param {clickManageProductInCartOaStoreFrontParams} params - The parameters for this event
 * @property {string} cartId - cartId
 * @property {string} cartType - cartType
 * @property {string} catalogAppId - Stores/bookings App id
 * @property {string} productId - productId
 * @property {string} productType - productType
 * @return {LogObject<clickManageProductInCartOaStoreFrontParams>} LogObject<clickManageProductInCartOaStoreFrontParams>
 */
export function clickManageProductInCartOaStoreFront(params) {
    return {
        evid: 185,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'checkoutIntegratingFormsFailure' event (evid: 823)
 *
 * Event description: This event sent when an error in initForms function (integrating forms to checkout) appeared.
 *
 * @param {checkoutIntegratingFormsFailureParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {string} formsTemplatesId - form_template_id
 * @property {string} networkError - network_error
 * @return {LogObject<checkoutIntegratingFormsFailureParams>} LogObject<checkoutIntegratingFormsFailureParams>
 */
export function checkoutIntegratingFormsFailure(params) {
    return {
        evid: 823,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'cartSelectShippingMethodFromTheDropdownInCartPage' event (evid: 222)
 *
 * Event description: ***NOT IN USE*** doesnt send data also in src 10. When a visitor clicks on one of the options in the shipping method dropdown on the cart page
 *
 * @param {cartSelectShippingMethodFromTheDropdownInCartPageParams} params - The parameters for this event
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {string} selected_shipping_method - the new shipping method that was selected from the dropdown in cart page (free shipping/ Flat rate/ rate by weight/ etc...)
 * @return {LogObject<cartSelectShippingMethodFromTheDropdownInCartPageParams>} LogObject<cartSelectShippingMethodFromTheDropdownInCartPageParams>
 */
export function cartSelectShippingMethodFromTheDropdownInCartPage(params) {
    return {
        evid: 222,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'clickContinueEWalletModalSf' event (evid: 225)
 *
 * Event description: When a visitor clicks on ‘Continue’ in e-wallet Modal (after the click the visitor is supposed to view the checkout).
 *
 * @param {clickContinueEWalletModalSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {number} itemsCount - Numbers of items in cart
 * @property {GUID} ecomId - ecom_id
 * @property {number} num_of_paymet_providers - How many payment providers does the store has connected
 * @property {number} num_of_shipping - number of shipping choices presented to the visitor at the first time
 * @property {string} origin - origin
 * @property {string} paymet_providers - array of payment providers connected to the store
 * @property {string} productsList - json containing all product guids for products in the cart
 * @property {string} type - add / edit
 * @return {LogObject<clickContinueEWalletModalSfParams>} LogObject<clickContinueEWalletModalSfParams>
 */
export function clickContinueEWalletModalSf(params) {
    return {
        evid: 225,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'editorResetAppSettingsSfe' event (evid: 819)
 *
 * Event description: click on 'reset settings' in app settings panel
 *
 * @param {editorResetAppSettingsSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} component_id - CurrencyConverter, AvalaraTax
 * @return {LogObject<editorResetAppSettingsSfeParams>} LogObject<editorResetAppSettingsSfeParams>
 */
export function editorResetAppSettingsSfe(params) {
    return {
        evid: 819,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'logoutModalInCheckoutLoaded' event (evid: 602)
 *
 * Event description: logout modal loaded in checkout after member presses logout
 *
 * @param {logoutModalInCheckoutLoadedParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName
 * @property {GUID} cartId - cart_id
 * @property {string} cartType
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @property {string} flowType - 'quick flow' / 'full flow'
 * @property {boolean} is_member
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {boolean} savedAddress - true if the member has saved address
 * @return {LogObject<logoutModalInCheckoutLoadedParams>} LogObject<logoutModalInCheckoutLoadedParams>
 */
export function logoutModalInCheckoutLoaded(params) {
    return {
        evid: 602,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'cancelClickedInSelectYourShippingDestinationPopupSf' event (evid: 126)
 *
 * Event description: in the cart page, when a user want to change is shipping address, to re calculate shipping cost estimation- cancel or x clicked
 *
 * @param {cancelClickedInSelectYourShippingDestinationPopupSfParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {GUID} ecomId - ecom_id
 * @return {LogObject<cancelClickedInSelectYourShippingDestinationPopupSfParams>} LogObject<cancelClickedInSelectYourShippingDestinationPopupSfParams>
 */
export function cancelClickedInSelectYourShippingDestinationPopupSf(params) {
    return {
        evid: 126,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'cartViewMiniCart' event (evid: 50)
 *
 * Event description: view mini cart pop-up
 *
 * @param {cartViewMiniCartParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {number} itemsCount - Numbers of items in cart
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {boolean} isMembersInstalled - true if members app installed on site, false otherwise
 * @property {string} origin - cartIcon / addToCartButton
 * @property {string} priceBreakdown - list of displayed price breakdowns - tax, shipping, etc. NULL if not relevant
 * @property {GUID} siteMemberId - member id
 * @property {string} viewMode - editor / site / preview
 * @return {LogObject<cartViewMiniCartParams>} LogObject<cartViewMiniCartParams>
 */
export function cartViewMiniCart(params) {
    return {
        evid: 50,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'errorWhenApplyingACoupon' event (evid: 117)
 *
 * @param {errorWhenApplyingACouponParams} params - The parameters for this event
 * @property {string} appName
 * @property {GUID} cartId
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {string} couponCode
 * @property {string} errorCode
 * @property {GUID} ecomId - ecom_id
 * @property {boolean} isMember
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {string} mobilePosition - Top/Bottom. Null if not mobile device. The place in the checkout on mobile device (not Wix app) where the uou did the action. There are 2 option - on the top of the checkout or on the bottom of the checkout.
 * @property {string} origin
 * @property {GUID} owner_id
 * @property {string} purchaseFlowId - purchase_flow_id
 * @return {LogObject<errorWhenApplyingACouponParams>} LogObject<errorWhenApplyingACouponParams>
 */
export function errorWhenApplyingACoupon(params) {
    return {
        evid: 117,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'paymentDetailsCompleted' event (evid: 177)
 *
 * Event description: UoU clicked continue on payment details step in new checkout funnel. since june 2019 also sent from OA StoreFront (with origin)
 *
 * @param {paymentDetailsCompletedParams} params - The parameters for this event
 * @property {number} additionalFeesPrice - INT, multiplied by 100 000 - sum of all additional fees price in order
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this order separated by “ ,“:(stores app id, bookings app_id, ...) .
 * @property {GUID} checkoutId - checkout_id
 * @property {number} optionscount - number of payment options
 * @property {GUID} ecomId - ecom_id
 * @property {number} selectedoptionindex - index of selected option
 * @property {boolean} isOwner - true if visitor is the site owner
 * @property {string} itemType - List of distinct checkout.lineItems.itemType
 * @property {number} numberOfAdditionalFees - number of all additional fees in the order
 * @property {string} paymentProvider - payment provider that was chosen
 * @return {LogObject<paymentDetailsCompletedParams>} LogObject<paymentDetailsCompletedParams>
 */
export function paymentDetailsCompleted(params) {
    return {
        evid: 177,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'bisClickOnTheSubmitButton' event (evid: 26)
 *
 * Event description: When a user clicks on the submit button in 'notify me' modal
 * If the input email is valid, then it triggers to create a request on the server.
 * if the input email is not valid it will send an error
 *
 * @param {bisClickOnTheSubmitButtonParams} params - The parameters for this event
 * @property {GUID} appId - the app Id of the catalog
 * @property {string} catalogAppId - catalog app id
 * @property {GUID} catalogInstanceId - In case of stores (store_id)
 * @property {string} catalogItemId - The guid of the requested item (product_guid / service_id..)
 * @property {boolean} isEmailValid - true - email is valid and trigger to created a request, false - email is not valid and an error is shown
 * @property {string} options - map of strings of the options chosen in the requested item
 * @return {LogObject<bisClickOnTheSubmitButtonParams>} LogObject<bisClickOnTheSubmitButtonParams>
 */
export function bisClickOnTheSubmitButton(params) {
    return {
        evid: 26,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'buyerShippingCountryIsSet' event (evid: 661)
 *
 * Event description: When a buyer (visitor/member) click on the shipping region dropdown   in checkout shippingAdress stage / in cart shipping calculator modal. (Created mainly as an exposure point for France regions AB test)
 *
 * @param {buyerShippingCountryIsSetParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {GUID} cartId - cart_id
 * @property {string} catalogAppId - catalog_app_id
 * @property {GUID} checkoutId - checkout_id
 * @property {string} flowType - 'Cart'- if the region was selected in cart modal ; 'Checkout' - if the region was selected in checkout stage
 * @property {boolean} is_member - true if the visitor signed in as a member, false otherwise
 * @property {string} origin - 'OA StoreFront' (for OneApp)
 * @property {GUID} owner_id - uuid of site owner
 * @property {string} shippingCountry - The selected shipping country
 * @return {LogObject<buyerShippingCountryIsSetParams>} LogObject<buyerShippingCountryIsSetParams>
 */
export function buyerShippingCountryIsSet(params) {
    return {
        evid: 661,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'editorChangeElementSettingsSfe' event (evid: 831)
 *
 * Event description: change element settings in SF component settings
 *
 * @param {editorChangeElementSettingsSfeParams} params - The parameters for this event
 * @property {string} appName - app_name
 * @property {string} component_id - grid gallery, slider galeery, product page,CurrencyConverter, AvalaraTax
 * @property {string} editorMode - mobile / desktop
 * @property {string} element - product image, name&price&sku, product options&quantity, button, info sections, social media
 * @property {string} new_value - ture/false,on/off, crop/fit...
 * @property {string} origin
 * @property {string} parameter - facebook,tweeter, image scaling, navigation position
 * @property {string} value - 0/1 (0= 'Above and below cart', 1='only below cart')
 * @return {LogObject<editorChangeElementSettingsSfeParams>} LogObject<editorChangeElementSettingsSfeParams>
 */
export function editorChangeElementSettingsSfe(params) {
    return {
        evid: 831,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
/**
 * A function to create a log object for the 'cartSelectCountryInShippingDestinationPopup' event (evid: 841)
 *
 * Event description: When the UOU chooses country in the shipping destination popup in cart (no matter which country) . Sent after uou is choosing country and not after clicking on update
 *
 * @param {cartSelectCountryInShippingDestinationPopupParams} params - The parameters for this event
 * @property {GUID} cartId - cart id
 * @property {string} cartType - Digital/ Physical/ mixed (Digital &Physical)
 * @property {string} catalogAppId - A list of verticals which are in this cart separated by “ ,“:(stores app id, bookings app_id, ...)
 * @property {GUID} checkoutId - checkout_id
 * @property {boolean} hasSubdivision - True if the country that was selected has any subdivisions or not (FALSE)
 * @property {string} purchaseFlowId - purchase_flow_id
 * @property {string} shippingDestinationCountry - shipping destination country
 * @return {LogObject<cartSelectCountryInShippingDestinationPopupParams>} LogObject<cartSelectCountryInShippingDestinationPopupParams>
 */
export function cartSelectCountryInShippingDestinationPopup(params) {
    return {
        evid: 841,
        src: 130,
        endpoint: 'ec-site',
        params: params
    };
}
//# sourceMappingURL=index.js.map