import {
    __assign,
    __extends
} from "tslib";
import * as React from 'react';
export function withSentryErrorBoundary(ComponentToWrap, options, ErrorStateComponent) {
    return /** @class */ (function(_super) {
        __extends(SentryErrorBoundary, _super);

        function SentryErrorBoundary() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
                error: null,
            };
            return _this;
        }
        SentryErrorBoundary.prototype.getLazySentry = function() {
            return new this.props.host.LazySentry(__assign(__assign({
                dsn: options.dsn
            }, options.config), {
                release: this.props.sentryRelease
            }));
        };
        SentryErrorBoundary.prototype.getRavenUserContextOverrides = function() {
            return this.props.ravenUserContextOverrides;
        };
        SentryErrorBoundary.prototype.componentDidCatch = function(error) {
            if (this.state.error === null) {
                this.setState({
                    error: error
                });
            }
            var sentryInstance = this.getLazySentry();
            if (!sentryInstance) {
                return;
            }
            if (options.tags) {
                sentryInstance.configureScope(function(scope) {
                    Object.keys(options.tags).forEach(function(tag) {
                        scope.setTag(tag, options.tags[tag]);
                    });
                });
            }
            var userContextOverrides = this.getRavenUserContextOverrides();
            if (options.userContext || userContextOverrides) {
                sentryInstance.configureScope(function(scope) {
                    scope.setUser(__assign(__assign({}, options.userContext), userContextOverrides));
                });
            }
            sentryInstance.captureException(error);
        };
        SentryErrorBoundary.prototype.render = function() {
            return this.state.error && ErrorStateComponent ? (React.createElement(ErrorStateComponent, __assign({
                error: this.state.error
            }, this.props))) : (React.createElement(ComponentToWrap, __assign({}, this.props)));
        };
        return SentryErrorBoundary;
    }(React.Component));
}
//# sourceMappingURL=sentryErrorBoundary.js.map