import {
    __assign
} from "tslib";
import * as React from 'react';
import * as utils from '../../constants/constants';
export var withLeanStyles = function(Component, options) {
    var cssFiles = [].concat(options.cssPath || []);
    var rtlCssFiles = [].concat(options.rtlCssPath || []);
    var ltrCssFiles = [].concat(options.ltrCssPath || []);
    var shouldUseFiles = rtlCssFiles.length;
    var WithStyles = function(props) {
        var isRTL = props.isRTL,
            host = props.host,
            cssBaseUrl = props.cssBaseUrl;
        var cssFilesToLoad = React.useMemo(function() {
            return cssFiles.concat(isRTL ? rtlCssFiles : ltrCssFiles);
        }, [isRTL]);
        var _a = React.useState(function() {
                var state = 0;
                if (!utils.canUseDom()) {
                    return state;
                }
                for (var _i = 0, _a = Array.from(document.styleSheets); _i < _a.length; _i++) {
                    var styleSheet = _a[_i];
                    if (typeof styleSheet.href === 'string') {
                        var filePath = styleSheet.href.replace(cssBaseUrl || '', '');
                        if (cssFilesToLoad.includes(filePath)) {
                            state++;
                        }
                    }
                }
                return state;
            }),
            loaded = _a[0],
            setLoaded = _a[1];
        var styleId = (host === null || host === void 0 ? void 0 : host.id) || props.id;
        var prefixSelector = styleId ? ".".concat(styleId) : '';
        var preloaded = React.useMemo(function() {
            if (utils.canUseDom()) {
                var links = document.querySelectorAll("".concat(prefixSelector, " link"));
                return links.length;
            }
            return cssFilesToLoad.length;
        }, []);
        var isReady = loaded + preloaded >= cssFilesToLoad.length;
        return (React.createElement("div", {
                className: styleId
            },
            cssBaseUrl && shouldUseFiles ?
            cssFilesToLoad.map(function(fileName) {
                return (React.createElement("link", {
                    href: "".concat(cssBaseUrl).concat(fileName),
                    rel: "stylesheet",
                    type: "text/css",
                    key: fileName,
                    onLoad: handleLinkLoad
                }));
            }) :
            null,
            shouldUseFiles && isReady ? React.createElement(Component, __assign({}, props)) : null, !shouldUseFiles && React.createElement(Component, __assign({}, props))));

        function handleLinkLoad() {
            setLoaded(function(count) {
                return count + 1;
            });
        }
    };
    WithStyles.displayName = 'WithStyles';
    WithStyles.tokenForCiPoliceRule = 'e2425ecc-e4c1-474c-9e2b-8357f32c907b';
    return WithStyles;
};
//# sourceMappingURL=withLeanStyles.js.map