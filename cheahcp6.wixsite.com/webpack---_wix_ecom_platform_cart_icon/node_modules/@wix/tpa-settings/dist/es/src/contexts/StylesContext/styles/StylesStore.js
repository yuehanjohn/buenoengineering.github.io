import {
    __assign,
    __awaiter,
    __generator
} from "tslib";
import parseColor from '../../../parseColor';
import {
    createStyleParamGetter,
    createStyleParamDefaultValueGetter,
} from './createStyleParamGetter';
import {
    StyleParamType,
} from '../../../types';
import {
    generateKey
} from '../../../generateKey';
import {
    NoGetDefaultValueSpecified
} from './NoGetDefaultValueSpecified';

function normalizeColor(color, colors) {
    if (color === null || color === void 0 ? void 0 : color.name) {
        var wixColor = colors.find(
            // c => c.reference === color.name,
            function(c) {
                return c.name === color.name;
            });
        return __assign(__assign({}, color), {
            value: parseColor(wixColor.value, color.opacity).rgb()
        });
    }
    return color;
}
var StylesStore = /** @class */ (function() {
    function StylesStore(_a) {
        var styleParams = _a.styleParams,
            wixStyles = _a.wixStyles,
            textPresets = _a.textPresets,
            colors = _a.colors,
            history = _a.history,
            bi = _a.bi,
            isMobile = _a.isMobile,
            isRTL = _a.isRTL,
            isEditorX = _a.isEditorX,
            dimensions = _a.dimensions,
            experiments = _a.experiments,
            styleParamsPerBreakpointMode = _a.styleParamsPerBreakpointMode,
            currentStylesGetter = _a.currentStylesGetter,
            allStylesGetter = _a.allStylesGetter;
        var _this = this;
        this.set = function(param, value, options) {
            var _a, _b;
            if (options === void 0) {
                options = {};
            }
            if (param.name) {
                console.warn("Check the \"".concat(param.name, "\" style param \u2013 property \"name\" is deprecated. Please use \"key\""));
            }
            var key = param.key || param.name;
            var paramKey = generateKey(__assign(__assign({}, param), {
                key: key
            }), {
                isMobile: _this.styleParamsPerBreakpointMode ? false : _this.isMobile,
            });
            switch (param.type) {
                case StyleParamType.Number:
                    _this.setNumberParam(paramKey, value, options);
                    break;
                case StyleParamType.Boolean:
                    _this.setBooleanParam(paramKey, value, options);
                    break;
                case StyleParamType.Font:
                    _this.setFontParam(paramKey, value, options);
                    break;
                case StyleParamType.Color:
                    _this.setColorParam(paramKey, value, options);
                    break;
                default:
                    {
                        console.error("\"".concat(param.type, "\" is not supported type."));
                    }
            }
            (_a = _this.history) === null || _a === void 0 ? void 0 : _a.addDebounced(key);
            (_b = _this.bi) === null || _b === void 0 ? void 0 : _b.settingsChanged({
                parameter: key,
                value: value,
            });
        };
        this.getCurrentStyles = function() {
            if (_this.currentStylesGetter) {
                return _this.wixStyles.decode(_this.currentStylesGetter(), _this.colors, _this.textPresets);
            }
            return _this.styles;
        };
        this.get = function(param) {
            var getParam = createStyleParamGetter({
                storage: _this.getCurrentStyles(),
                colors: _this.colors,
                textPresets: _this.textPresets,
                isMobile: _this.isMobile,
                isRTL: _this.isRTL,
                isEditorX: _this.isEditorX,
                dimensions: _this.dimensions,
                experiments: _this.experiments,
                styleParamsPerBreakpointMode: _this.styleParamsPerBreakpointMode,
            });
            return getParam(param);
        };
        this.getDefaultValue = function(param) {
            if (!param.getDefaultValue) {
                throw new NoGetDefaultValueSpecified(param.key);
            }
            var getDefaultValue = createStyleParamDefaultValueGetter({
                styles: _this.styles,
                colors: _this.colors,
                textPresets: _this.textPresets,
                isMobile: _this.isMobile,
                isRTL: _this.isRTL,
                isEditorX: _this.isEditorX,
                dimensions: _this.dimensions,
                experiments: _this.experiments,
                styleParamsPerBreakpointMode: _this.styleParamsPerBreakpointMode,
            });
            return getDefaultValue(param);
        };
        this.reset = function(param) {
            var getDefaultValue = createStyleParamDefaultValueGetter({
                styles: _this.styles,
                colors: _this.colors,
                textPresets: _this.textPresets,
                isMobile: _this.isMobile,
                isRTL: _this.isRTL,
                isEditorX: _this.isEditorX,
                dimensions: _this.dimensions,
                experiments: _this.experiments,
                styleParamsPerBreakpointMode: _this.styleParamsPerBreakpointMode,
            });
            _this.set(param, getDefaultValue(param));
        };
        this.resetAll = function(styles) {
            var _a, _b;
            (_a = _this.history) === null || _a === void 0 ? void 0 : _a.startBatch();
            Object.keys(styles).forEach(function(key) {
                _this.reset(styles[key]);
            });
            (_b = _this.history) === null || _b === void 0 ? void 0 : _b.endBatch('All styles');
        };
        this.wixStyles = wixStyles;
        this.textPresets = textPresets;
        this.colors = colors;
        this.styles = styleParams;
        this.history = history;
        this.bi = bi;
        this.isMobile = isMobile;
        this.isRTL = isRTL;
        this.isEditorX = isEditorX;
        this.dimensions = dimensions;
        this.experiments = experiments;
        this.styleParamsPerBreakpointMode = styleParamsPerBreakpointMode;
        this.currentStylesGetter = currentStylesGetter;
        this.allStylesGetter = allStylesGetter;
    }
    StylesStore.prototype.setStylesParam = function(param, key, value) {
        var _a, _b;
        this.styles = __assign(__assign({}, this.styles), (_a = {}, _a[param] = __assign(__assign({}, this.styles[param]), (_b = {}, _b[key] = value, _b)), _a));
    };
    StylesStore.prototype.setBooleanParam = function(key, value, options) {
        this.setStylesParam('booleans', key, value);
        this.wixStyles.setBooleanParam(key, value, options);
    };
    StylesStore.prototype.setColorParam = function(key, value, options) {
        this.setStylesParam('colors', key, normalizeColor(value, this.colors));
        this.wixStyles.setColorParam(key, value, options);
    };
    StylesStore.prototype.setFontParam = function(key, value, options) {
        this.setStylesParam('fonts', key, value);
        this.wixStyles.setFontParam(key, value, options);
    };
    StylesStore.prototype.setNumberParam = function(key, value, options) {
        this.setStylesParam('numbers', key, value);
        this.wixStyles.setNumberParam(key, value, options);
    };
    StylesStore.prototype.getAll = function() {
        return JSON.parse(JSON.stringify(this.getCurrentStyles()));
    };
    StylesStore.prototype.getAllForAllBreakpoints = function() {
        var _this = this;
        if (this.allStylesGetter) {
            return JSON.parse(JSON.stringify(this.allStylesGetter().map(function(styleParamsForBreakpoint) {
                return _this.wixStyles.decode(styleParamsForBreakpoint, _this.colors, _this.textPresets);
            })));
        }
        return [this.getAll()];
    };
    StylesStore.prototype.setStyleParams = function(styleParams) {
        return __awaiter(this, void 0, void 0, function() {
            var _a;
            return __generator(this, function(_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/ , this.wixStyles.decode(styleParams, this.colors, this.textPresets)];
                    case 1:
                        _a.styles = _b.sent();
                        return [2 /*return*/ ];
                }
            });
        });
    };
    StylesStore.prototype.handleSiteColorChange = function(palette) {
        var colors = this.styles.colors;
        var newColors = Object.keys(colors).reduce(function(acc, key) {
            if (colors[key].name) {
                acc[key] = __assign(__assign({}, colors[key]), {
                    value: palette[colors[key].name]
                });
            } else {
                acc[key] = colors[key];
            }
            return acc;
        }, {});
        this.styles = __assign(__assign({}, this.styles), {
            colors: newColors
        });
    };
    return StylesStore;
}());
export {
    StylesStore
};
//# sourceMappingURL=StylesStore.js.map