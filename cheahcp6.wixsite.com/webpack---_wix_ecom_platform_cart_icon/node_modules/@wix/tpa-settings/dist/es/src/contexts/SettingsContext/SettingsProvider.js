import {
    __assign,
    __awaiter,
    __extends,
    __generator
} from "tslib";
import React from 'react';
import PropTypes from 'prop-types';
import {
    SettingsContext
} from './SettingsContext';
import {
    SettingsProviderIsNotReadyError
} from './SettingsProviderIsNotReadyError';
import {
    CantModifyParamError,
    ModifyModes,
    ParamType,
} from '../Error/CantModifyParamError';
import {
    ValueSerializer
} from './ValueSerializer';
import {
    NoSDKOrDataProvidedError
} from './NoSDKOrDataProvidedError';
import {
    generateKey,
    isParamTranslatable
} from '../../generateKey';
import {
    getSettingsDefaultValue,
    getSettingsValue
} from './getSettingsValue';
export var EVENTS_KEY = '___settingsEvent';
var createPublicData = function(newPublicData) {
    var _a, _b;
    return ({
        APP: (_a = newPublicData === null || newPublicData === void 0 ? void 0 : newPublicData.APP) !== null && _a !== void 0 ? _a : {},
        COMPONENT: (_b = newPublicData === null || newPublicData === void 0 ? void 0 : newPublicData.COMPONENT) !== null && _b !== void 0 ? _b : {},
    });
};
var SettingsProvider = /** @class */ (function(_super) {
    __extends(SettingsProvider, _super);

    function SettingsProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.handleRevisionChanged = function() {
            return __awaiter(_this, void 0, void 0, function() {
                var SDKAdapter, newPublicData;
                return __generator(this, function(_a) {
                    switch (_a.label) {
                        case 0:
                            SDKAdapter = this.props.SDKAdapter;
                            if (!!this.isWidgetMode()) return [3 /*break*/ , 2];
                            return [4 /*yield*/ , SDKAdapter.getAllData()];
                        case 1:
                            newPublicData = _a.sent();
                            this.setState({
                                publicData: createPublicData(newPublicData),
                            });
                            _a.label = 2;
                        case 2:
                            return [2 /*return*/ ];
                    }
                });
            });
        };
        _this.getLanguageForParam = function(param) {
            return isParamTranslatable(param) ? _this.props.language : undefined;
        };
        _this.handleGetParam = function(param) {
            var scope = _this.props.scope;
            if (!_this.state.ready) {
                throw new SettingsProviderIsNotReadyError();
            }
            return getSettingsValue(_this.state.publicData, param, {
                t: _this.props.t,
                experiments: _this.props.experiments,
                isMobile: _this.props.isMobile,
                isEditorX: _this.props.isEditorX,
                isRTL: _this.props.isRTL,
                language: _this.props.language,
                presetId: _this.state.publicData[scope].presetId,
                environmentLabel: '<SettingsProvider />',
            }, scope);
        };
        _this.handleGetDefaultValue = function(param) {
            var scope = _this.props.scope;
            return getSettingsDefaultValue(_this.state.publicData, scope, param, {
                t: _this.props.t,
                experiments: _this.props.experiments,
                isMobile: _this.props.isMobile,
                isEditorX: _this.props.isEditorX,
                isRTL: _this.props.isRTL,
                presetId: _this.state.publicData[scope].presetId,
                environmentLabel: '<SettingsProvider />',
            });
        };
        _this.handleSetParam = function(param, value) {
            var _a, _b;
            var scope = _this.props.scope;
            if (!_this.state.ready) {
                throw new SettingsProviderIsNotReadyError();
            }
            if (_this.isWidgetMode()) {
                throw new CantModifyParamError(ModifyModes.Set, ParamType.Setting);
            }
            var serializedValue = _this.serializer.serialize(param, value);
            var key = generateKey(param, {
                isMobile: _this.props.isMobile,
                language: _this.getLanguageForParam(param),
            });
            if (_this.state.publicData[scope][key] === serializedValue) {
                return;
            }
            _this.setState(function(state) {
                var _a, _b;
                return __assign(__assign({}, state), {
                    publicData: __assign(__assign({}, state.publicData), (_a = {}, _a[scope] = __assign(__assign({}, state.publicData[scope]), (_b = {}, _b[key] = serializedValue, _b)), _a))
                });
            });
            _this.setWixDataParam(key, serializedValue);
            (_a = _this.props.history) === null || _a === void 0 ? void 0 : _a.addDebounced(param.key);
            (_b = _this.props.bi) === null || _b === void 0 ? void 0 : _b.settingsChanged({
                parameter: param.key,
                value: serializedValue,
            });
        };
        _this.handleResetParam = function(param) {
            var _a, _b;
            var scope = _this.props.scope;
            if (_this.isWidgetMode()) {
                throw new CantModifyParamError(ModifyModes.Reset, ParamType.Setting);
            }
            var key = generateKey(param, {
                isMobile: _this.props.isMobile,
                language: _this.getLanguageForParam(param),
            });
            _this.setState(function(state) {
                var _a, _b;
                return __assign(__assign({}, state), {
                    publicData: __assign(__assign({}, state.publicData), (_a = {}, _a[scope] = __assign(__assign({}, state.publicData[scope]), (_b = {}, _b[key] = undefined, _b)), _a))
                });
            });
            _this.removeWixDataParam(key);
            (_a = _this.props.history) === null || _a === void 0 ? void 0 : _a.addDebounced(param.key);
            (_b = _this.props.bi) === null || _b === void 0 ? void 0 : _b.settingsChanged({
                parameter: param.key,
                value: '',
            });
        };
        _this.handleResetAll = function(settings) {
            var _a, _b;
            if (_this.isWidgetMode()) {
                throw new CantModifyParamError(ModifyModes.ResetAll, ParamType.Setting);
            }
            (_a = _this.props.history) === null || _a === void 0 ? void 0 : _a.startBatch();
            Object.keys(settings).forEach(function(key) {
                _this.handleResetParam(settings[key]);
            });
            (_b = _this.props.history) === null || _b === void 0 ? void 0 : _b.endBatch('All settings');
        };
        _this.handlePublishEvent = function(event, value) {
            if (_this.isWidgetMode()) {
                throw new CantModifyParamError(ModifyModes.PublishEvent, ParamType.Setting);
            }
            _this.setWixDataParam(EVENTS_KEY, {
                event: event,
                payload: {
                    id: Date.now(),
                    value: value,
                },
            });
        };
        var publicData = props.publicData;
        _this.state = {
            ready: !!publicData,
            publicData: createPublicData(publicData),
        };
        _this.serializer = new ValueSerializer();
        return _this;
    }
    SettingsProvider.prototype.componentDidMount = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _a, SDKAdapter, publicData, newPublicData;
            var _this = this;
            return __generator(this, function(_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, SDKAdapter = _a.SDKAdapter, publicData = _a.publicData;
                        // Public data was set via props directly.
                        if (publicData) {
                            return [2 /*return*/ ];
                        }
                        if (!SDKAdapter) return [3 /*break*/ , 2];
                        return [4 /*yield*/ , SDKAdapter.getAllData()];
                    case 1:
                        newPublicData = _b.sent();
                        this.setState({
                            ready: true,
                            publicData: createPublicData(newPublicData),
                        });
                        window.onunload = function() {
                            _this.handlePublishEvent('reset', {});
                        };
                        return [2 /*return*/ ];
                    case 2:
                        throw new NoSDKOrDataProvidedError();
                }
            });
        });
    };
    SettingsProvider.prototype.componentDidUpdate = function(prevProps) {
        var _a = this.props,
            publicData = _a.publicData,
            revisionID = _a.revisionID;
        if (this.isWidgetMode() && publicData !== prevProps.publicData) {
            this.setState({
                ready: !!publicData,
                publicData: createPublicData(publicData),
            });
        }
        if (revisionID !== prevProps.revisionID) {
            this.handleRevisionChanged();
        }
    };
    SettingsProvider.prototype.isWidgetMode = function() {
        return this.props.publicData;
    };
    SettingsProvider.prototype.setWixDataParam = function(key, value) {
        var _a = this.props,
            SDKAdapter = _a.SDKAdapter,
            scope = _a.scope;
        SDKAdapter.setData(key, value, scope);
    };
    SettingsProvider.prototype.removeWixDataParam = function(key) {
        var _a = this.props,
            SDKAdapter = _a.SDKAdapter,
            scope = _a.scope;
        SDKAdapter.removeData(key, scope);
    };
    SettingsProvider.prototype.render = function() {
        return (React.createElement(SettingsContext.Provider, {
            value: {
                ready: this.state.ready,
                get: this.handleGetParam,
                getDefaultValue: this.handleGetDefaultValue,
                set: this.handleSetParam,
                reset: this.handleResetParam,
                resetAll: this.handleResetAll,
                publishEvent: this.handlePublishEvent,
            }
        }, this.props.children));
    };
    SettingsProvider.propTypes = {
        SDKAdapter: PropTypes.object,
        settingsValues: PropTypes.object,
        t: PropTypes.func,
        experiments: PropTypes.object,
        bi: PropTypes.object,
        isMobile: PropTypes.bool,
        isEditorX: PropTypes.bool,
        scope: PropTypes.string.isRequired,
    };
    SettingsProvider.defaultProps = {
        scope: 'COMPONENT',
    };
    return SettingsProvider;
}(React.Component));
export {
    SettingsProvider
};
//# sourceMappingURL=SettingsProvider.js.map