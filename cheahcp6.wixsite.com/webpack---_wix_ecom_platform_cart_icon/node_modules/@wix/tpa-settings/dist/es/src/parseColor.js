import {
    __spreadArray
} from "tslib";
import colorString from 'color-string';
var COLOR_CHANNELS = 3;
var rgbToHex = function(args) {
    var integer = ((Math.round(args[0]) & 0xff) << 16) +
        ((Math.round(args[1]) & 0xff) << 8) +
        (Math.round(args[2]) & 0xff);
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
};
var parseColor = function(value, forcedOpacity) {
    var _a;
    var color;
    var opacity;
    if (!value) {
        color = [0, 0, 0];
        opacity = 1;
    } else {
        var result = colorString.get(value);
        if (result === null) {
            throw new Error('Unable to parse color from string: ' + value);
        }
        color = result.value.slice(0, COLOR_CHANNELS);
        opacity = (_a = result.value[COLOR_CHANNELS]) !== null && _a !== void 0 ? _a : 1;
    }
    return {
        rgb: function() {
            var _a;
            return (_a = colorString.to).rgb.apply(_a, __spreadArray(__spreadArray([], color, false), [forcedOpacity !== null && forcedOpacity !== void 0 ? forcedOpacity : opacity], false));
        },
        hex: function() {
            return rgbToHex(color);
        },
        opacity: function() {
            return forcedOpacity !== null && forcedOpacity !== void 0 ? forcedOpacity : opacity;
        },
    };
};
export default parseColor;
//# sourceMappingURL=parseColor.js.map