var _a;
import {
    __awaiter,
    __extends,
    __generator
} from "tslib";
import React from 'react';
import PropTypes from 'prop-types';
import {
    isEqual
} from 'lodash';
import {
    StylesContext
} from './StylesContext';
import {
    StyleParamType,
} from './StylesContext.types';
import {
    StylesStore
} from './styles/StylesStore';
import {
    WixStyles
} from './styles/WixStyles';
import {
    createStyleParamGetter
} from './styles/createStyleParamGetter';
import {
    StylesProviderIsNotReadyError
} from './StylesProviderIsNotReadyError';
import {
    CantModifyParamError,
    ParamType,
    ModifyModes,
} from '../Error/CantModifyParamError';
var TPASettingStyleParamToStyleMap = (_a = {},
    _a[StyleParamType.Number] = 'numbers',
    _a[StyleParamType.Boolean] = 'booleans',
    _a[StyleParamType.Font] = 'fonts',
    _a[StyleParamType.Color] = 'colors',
    _a);
var StylesProvider = /** @class */ (function(_super) {
    __extends(StylesProvider, _super);

    function StylesProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            ready: false,
            styles: null,
        };
        _this.getStyleParamsWithDefaults = function(styleParams) {
            var userStylesParams = _this.props.userStylesParams;
            if (!userStylesParams) {
                return styleParams;
            }
            var getParam = createStyleParamGetter({
                storage: styleParams,
                colors: _this.props.siteColors,
                textPresets: _this.props.textPresets,
                isMobile: _this.props.isMobile,
                isRTL: _this.props.isRTL,
                isEditorX: _this.props.isEditorX,
                dimensions: _this.props.dimensions,
                experiments: _this.props.experiments,
                styleParamsPerBreakpointMode: _this.props.styleParamsPerBreakpointMode,
            });
            Object.values(userStylesParams).forEach(function(userStyleParam) {
                var styleParamValue = getParam(userStyleParam);
                if (typeof styleParamValue !== 'undefined') {
                    styleParams[TPASettingStyleParamToStyleMap[userStyleParam.type]][userStyleParam.key] = styleParamValue;
                }
            });
            return styleParams;
        };
        _this.getStylesForAllBreakpoints = function() {
            if (!_this.state.ready) {
                throw new StylesProviderIsNotReadyError();
            }
            return _this.stylesStore
                .getAllForAllBreakpoints()
                .map(_this.getStyleParamsWithDefaults);
        };
        _this.handleGetParam = function(key) {
            if (!_this.state.ready) {
                throw new StylesProviderIsNotReadyError();
            }
            return _this.stylesStore.get(key);
        };
        _this.handleGetDefaultValue = function(key) {
            if (!_this.state.ready) {
                throw new StylesProviderIsNotReadyError();
            }
            return _this.stylesStore.getDefaultValue(key);
        };
        _this.handleSetParam = function(key, value, options) {
            if (!_this.state.ready) {
                throw new StylesProviderIsNotReadyError();
            }
            if (_this.isWidgetMode()) {
                throw new CantModifyParamError(ModifyModes.Set, ParamType.Styles);
            }
            if (_this.stylesStore.get(key) === value) {
                return;
            }
            _this.stylesStore.set(key, value, options);
            var styles = _this.stylesStore.getAll();
            _this.setState({
                styles: styles,
            });
        };
        _this.handleResetParam = function(key) {
            if (!_this.state.ready) {
                throw new StylesProviderIsNotReadyError();
            }
            if (_this.isWidgetMode()) {
                throw new CantModifyParamError(ModifyModes.Reset, ParamType.Styles);
            }
            _this.stylesStore.reset(key);
            var styles = _this.stylesStore.getAll();
            _this.setState({
                styles: styles,
            });
        };
        _this.handleResetAll = function(styles) {
            if (!_this.state.ready) {
                throw new StylesProviderIsNotReadyError();
            }
            if (_this.isWidgetMode()) {
                throw new CantModifyParamError(ModifyModes.ResetAll, ParamType.Styles);
            }
            _this.stylesStore.resetAll(styles);
            _this.setState({
                styles: _this.stylesStore.getAll(),
            });
        };
        _this.handleSiteColorChange = function(palette) {
            if (!_this.state.ready) {
                throw new StylesProviderIsNotReadyError();
            }
            _this.stylesStore.handleSiteColorChange(palette);
            var styles = _this.stylesStore.getAll();
            _this.setState({
                styles: styles,
            });
        };
        if (_this.isWidgetMode(props)) {
            _this.wixStyles = new WixStyles();
            _this.initStylesStore({
                textPresets: props.textPresets,
                colors: props.siteColors,
                styleParams: props.styleParams,
                currentStylesGetter: props.currentStylesGetter,
                allStylesGetter: props.allStylesGetter,
            });
        }
        _this.state = {
            ready: _this.isWidgetMode(props),
            styles: null,
        };
        return _this;
    }
    StylesProvider.prototype.componentDidMount = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _a, styleParams, textPresets, colors, _b, _c, _d;
            return __generator(this, function(_e) {
                switch (_e.label) {
                    case 0:
                        if (this.isWidgetModeWithoutStyleProps()) {
                            this.setState({
                                ready: true,
                            });
                            return [2 /*return*/ ];
                        }
                        if (this.isWidgetMode()) {
                            return [2 /*return*/ ];
                        }
                        this.wixStyles = new WixStyles(this.props.SDKAdapter, this.props.editorSDK);
                        _c = (_b = Promise).all;
                        return [4 /*yield*/ , this.wixStyles.load()];
                    case 1:
                        _d = [
                            _e.sent()
                        ];
                        return [4 /*yield*/ , this.wixStyles.getSiteTextPresets()];
                    case 2:
                        _d = _d.concat([
                            _e.sent()
                        ]);
                        return [4 /*yield*/ , this.wixStyles.getSiteColors()];
                    case 3:
                        return [4 /*yield*/ , _c.apply(_b, [_d.concat([
                            _e.sent()
                        ])])];
                    case 4:
                        _a = _e.sent(), styleParams = _a[0], textPresets = _a[1], colors = _a[2];
                        this.initStylesStore({
                            styleParams: styleParams,
                            textPresets: textPresets,
                            colors: colors,
                            currentStylesGetter: this.props.currentStylesGetter,
                            allStylesGetter: this.props.allStylesGetter,
                        });
                        /**
                         * Need to keep ready in `state` to re-render component when style are loaded
                         */
                        this.setState({
                            ready: true,
                        });
                        return [2 /*return*/ ];
                }
            });
        });
    };
    StylesProvider.prototype.initStylesStore = function(_a) {
        var styleParams = _a.styleParams,
            textPresets = _a.textPresets,
            colors = _a.colors,
            currentStylesGetter = _a.currentStylesGetter,
            allStylesGetter = _a.allStylesGetter;
        var decodedStyleParams = this.wixStyles.decode(styleParams, colors, textPresets);
        this.stylesStore = new StylesStore({
            styleParams: decodedStyleParams,
            textPresets: textPresets,
            colors: colors,
            wixStyles: this.wixStyles || null,
            history: this.props.history,
            bi: this.props.bi,
            isMobile: this.props.isMobile,
            isRTL: this.props.isRTL,
            isEditorX: this.props.isEditorX,
            dimensions: this.props.dimensions,
            experiments: this.props.experiments,
            styleParamsPerBreakpointMode: this.props.styleParamsPerBreakpointMode,
            currentStylesGetter: currentStylesGetter,
            allStylesGetter: allStylesGetter,
        });
    };
    StylesProvider.prototype.componentDidUpdate = function(prevProps) {
        return __awaiter(this, void 0, void 0, function() {
            var styleParams, styles;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.props.revisionID !== prevProps.revisionID)) return [3 /*break*/ , 2];
                        if (!this.props.editorSDK) {
                            throw new Error("Pass editorSDK to TPASettingsProvider's props");
                        }
                        return [4 /*yield*/ , this.wixStyles.refresh()];
                    case 1:
                        styleParams = _a.sent();
                        this.stylesStore.setStyleParams(styleParams);
                        styles = this.stylesStore.getAll();
                        this.setState({
                            styles: styles,
                        });
                        _a.label = 2;
                    case 2:
                        if (this.isWidgetMode(this.props) &&
                            this.widgetPropsChanged(this.props, prevProps)) {
                            this.initStylesStore({
                                textPresets: this.props.textPresets,
                                colors: this.props.siteColors,
                                styleParams: this.props.styleParams,
                                currentStylesGetter: this.props.currentStylesGetter,
                                allStylesGetter: this.props.allStylesGetter,
                            });
                        }
                        return [2 /*return*/ ];
                }
            });
        });
    };
    StylesProvider.prototype.isWidgetMode = function(props) {
        if (props === void 0) {
            props = this.props;
        }
        return props.styleParams && !props.SDKAdapter;
    };
    StylesProvider.prototype.widgetPropsChanged = function(props, prevProps) {
        return (!isEqual(props.styleParams, prevProps.styleParams) ||
            !isEqual(props.siteColors, prevProps.siteColors) ||
            !isEqual(props.textPresets, prevProps.textPresets) ||
            !isEqual(props.dimensions, prevProps.dimensions) ||
            props.isMobile !== prevProps.isMobile ||
            props.allStylesGetter !== prevProps.allStylesGetter ||
            props.currentStylesGetter !== prevProps.currentStylesGetter);
    };
    StylesProvider.prototype.isWidgetModeWithoutStyleProps = function() {
        return !this.isWidgetMode() && !this.props.SDKAdapter;
    };
    StylesProvider.prototype.render = function() {
        return (React.createElement(StylesContext.Provider, {
            value: {
                getStylesForAllBreakpoints: this.getStylesForAllBreakpoints,
                ready: this.state.ready,
                get: this.handleGetParam,
                getDefaultValue: this.handleGetDefaultValue,
                set: this.handleSetParam,
                reset: this.handleResetParam,
                resetAll: this.handleResetAll,
                changeSiteColors: this.handleSiteColorChange,
            }
        }, this.props.children));
    };
    StylesProvider.propTypes = {
        SDKAdapter: PropTypes.object,
        isMobile: PropTypes.bool,
        isRTL: PropTypes.bool,
        isEditorX: PropTypes.bool,
        dimensions: PropTypes.object,
        experiments: PropTypes.object,
        bi: PropTypes.object,
        styleParams: PropTypes.object,
        textPresets: PropTypes.object,
        siteColors: PropTypes.array,
        userStylesParams: PropTypes.object,
        styleParamsPerBreakpointMode: PropTypes.bool,
        currentStylesGetter: PropTypes.func,
        allStylesGetter: PropTypes.func,
    };
    return StylesProvider;
}(React.Component));
export {
    StylesProvider
};
//# sourceMappingURL=StylesProvider.js.map