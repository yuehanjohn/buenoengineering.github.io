import {
    controllerWithErrorBoundary,
    isControllerError,
    wrapUserController,
} from '../helpers/wrapUserController';
import {
    OOIControllerFlowAPI
} from '../flow-api/OOIController';
import {
    createDangerousPublicDataOverride
} from '../helpers/createDangerousPublicDataOverride';
import {
    createDangerousStylesOverride
} from '../helpers/createDangerousStylesOverride';
import {
    getPublicPath
} from '../utils';
import {
    createPanoramaClient
} from '../panorama';
export var ooiControllerWrapper = function(optionalDeps, controllerDescriptor, controllerConfig, viewerScriptFlowAPI, viewerScriptFlowAPIInitPromise, getAppData) {
    var appParams = controllerConfig.appParams;
    var appDefinitionId = appParams.appDefinitionId;
    var appData = getAppData();
    var translations = viewerScriptFlowAPI.createTranslations(controllerDescriptor, optionalDeps, {
        basePath: getPublicPath()
    });
    var panoramaClient = createPanoramaClient(controllerConfig.essentials, {
        componentId: controllerDescriptor.id,
        sentryConfig: controllerDescriptor.sentryConfig,
        environment: 'Viewer:Worker',
    });
    var flowAPI = new OOIControllerFlowAPI({
        translations: translations,
        viewerScriptFlowAPI: viewerScriptFlowAPI,
        componentId: controllerDescriptor.id,
        componentName: controllerDescriptor.componentName,
        persistentAcrossPages: controllerDescriptor.persistentAcrossPages,
        appDefinitionId: appDefinitionId,
        translationsConfig: controllerDescriptor.translationsConfig,
        widgetId: controllerDescriptor.id,
        biLogger: controllerDescriptor.biLogger,
        controllerConfig: controllerConfig,
        sentryConfig: controllerDescriptor.sentryConfig,
        fedopsConfig: controllerDescriptor.fedopsConfig,
        prepopulatedData: controllerDescriptor.prepopulatedData,
        shouldUseEssentials: controllerDescriptor.shouldUseEssentials,
        multilingualDisabled: controllerDescriptor.multilingualDisabled,
        panoramaClient: panoramaClient,
    });
    var wrappedController = Promise.all([
            viewerScriptFlowAPIInitPromise,
            flowAPI.init(),
        ])
        .then(function() {
            return controllerWithErrorBoundary(function() {
                return controllerDescriptor.method({
                    controllerConfig: flowAPI.controllerConfig,
                    flowAPI: flowAPI,
                    appData: appData,
                    dangerousPublicDataOverride: createDangerousPublicDataOverride(flowAPI),
                    dangerousStylesOverride: createDangerousStylesOverride(flowAPI),
                });
            }, flowAPI, controllerDescriptor.appName, controllerDescriptor.componentName);
        })
        .then(function(userController) {
            return wrapUserController({
                controller: !isControllerError(userController) ? userController : null,
                translations: flowAPI.translations,
                experiments: flowAPI.experiments,
                biLogger: flowAPI.bi,
                controllerConfig: controllerConfig,
                flowAPI: flowAPI,
                experimentsConfig: controllerDescriptor.experimentsConfig,
                translationsConfig: controllerDescriptor.translationsConfig,
                appName: controllerDescriptor.appName,
                componentName: controllerDescriptor.componentName,
                withErrorBoundary: controllerDescriptor.withErrorBoundary,
                _controllerErrorId: isControllerError(userController) ?
                    userController._errorId :
                    undefined,
                _controllerError: isControllerError(userController) ?
                    userController._error :
                    undefined,
                optionalDeps: optionalDeps,
                panoramaClient: panoramaClient,
            });
        });
    return wrappedController;
};
//# sourceMappingURL=ooiControllerWrapper.js.map