import {
    __rest
} from "tslib";
import {
    isNil,
    isPlainObject,
    noop
} from 'lodash';
import {
    pascalCase
} from './utils/stringUtils';
import {
    createWidgetServices
} from './widgetServices';
import {
    WidgetCreationError
} from './errors/widgetCreationError';
import {
    isBlocksAppParams
} from './utils';

function getCreateEventFN($w, createEvent) {
    return (event) => {
        if (createEvent) {
            return createEvent(event);
        }
        const {
            type
        } = event, data = __rest(event, ["type"]);
        return $w.createEvent(type, data);
    };
}

function withEventListeners(widgetApi, widgetMetaData, $w, createEvent) {
    var _a;
    (_a = widgetMetaData.events) === null || _a === void 0 ? void 0 : _a.forEach(({
        name
    }) => {
        widgetApi[`on${pascalCase(name)}`] = (cb) => $w.on(name, (event) => cb(createEvent(event)));
    });
    return widgetApi;
}

function mergeConsumerAndDefaultProps(widgetProps = {}, defaultProps) {
    if (!defaultProps) {
        return widgetProps;
    }
    return Object.entries(defaultProps).reduce((mergedProps, [propKey, defaultValue]) => {
        const value = widgetProps[propKey];
        if (isPlainObject(value)) {
            mergedProps[propKey] =
                mergeConsumerAndDefaultProps(value, defaultValue);
        } else {
            mergedProps[propKey] = isNil(value) ? defaultValue : value;
        }
        return mergedProps;
    }, {});
}
const normalizeDefaultProps = (defaultProps = []) => {
    return defaultProps.reduce((normalizedObj, {
        name,
        defaultValue
    }) => {
        normalizedObj[name] = defaultValue;
        return normalizedObj;
    }, {});
};

function shouldInvokePropsChangedOnUpdateConfig({
    appParams
}) {
    var _a, _b;
    if (isBlocksAppParams(appParams)) {
        return (_b = (_a = appParams.appData) === null || _a === void 0 ? void 0 : _a.blocksConsumerData) === null || _b === void 0 ? void 0 : _b.invokePropsChangedOnUpdateConfig;
    }
    return false;
}
export async function createWidgetController(controllerConfig, widgetMetaData, createWidgetFn, options = {
    shouldAddInternalApi: true,
}) {
    const {
        $w,
        config
    } = controllerConfig;
    const normalizedDefaultProps = normalizeDefaultProps(widgetMetaData.properties);
    const mergedProps = mergeConsumerAndDefaultProps(config.props, normalizedDefaultProps);
    const {
        generate$widget,
        generateWidgetAPI,
        setProps
    } = createWidgetServices(mergedProps, options.shouldAddInternalApi);
    const $widget = generate$widget($w);
    let customPageReady = noop;
    let moduleExports = {};
    let updateWidgetViewState;
    try {
        const widgetController = await createWidgetFn(Object.assign({
            $widget
        }, controllerConfig));
        customPageReady = widgetController === null || widgetController === void 0 ? void 0 : widgetController.pageReady;
        moduleExports = widgetController === null || widgetController === void 0 ? void 0 : widgetController.exports;
        updateWidgetViewState = widgetController === null || widgetController === void 0 ? void 0 : widgetController.updateWidgetViewState;
    } catch (e) {
        throw new WidgetCreationError(e);
    }
    const widgetApiFactory = (createEvent) => {
        const initialWidgetApi = generateWidgetAPI($widget, moduleExports);
        return withEventListeners(initialWidgetApi, widgetMetaData, $w, getCreateEventFN($w, createEvent));
    };
    const updateConfig = (_scoped$w, newConfig) => {
        const props = mergeConsumerAndDefaultProps(newConfig.props, $widget.props);
        setProps($widget, props);
    };
    return {
        pageReady(scoped$w) {
            return customPageReady(scoped$w);
        },
        updateConfig: shouldInvokePropsChangedOnUpdateConfig(controllerConfig) ?
            updateConfig :
            undefined,
        updateWidgetViewState,
        exports: (_, createEvent) => widgetApiFactory(createEvent),
    };
}
//# sourceMappingURL=createWidgetController.js.map