import {
    __assign
} from "tslib";
import {
    StyleParamType,
} from '../../../types';
import {
    generateKey
} from '../../../generateKey';
import {
    paramShouldInheritDesktop
} from '../../../utils/paramShouldInheritDesktop';
export function createStyleParamDefaultValueGetter(_a) {
    var styles = _a.styles,
        textPresets = _a.textPresets,
        colors = _a.colors,
        isMobile = _a.isMobile,
        isRTL = _a.isRTL,
        isEditorX = _a.isEditorX,
        dimensions = _a.dimensions,
        experiments = _a.experiments,
        styleParamsPerBreakpointMode = _a.styleParamsPerBreakpointMode;
    return function(param) {
        return param.getDefaultValue({
            colors: colors,
            textPresets: textPresets,
            isMobile: isMobile,
            isRTL: isRTL,
            isEditorX: isEditorX,
            dimensions: dimensions,
            experiments: experiments,
            getStyleParamValue: function(depParam, options) {
                if (options === void 0) {
                    options = {};
                }
                var getParam = createStyleParamGetter(__assign({
                    storage: styles,
                    colors: colors,
                    textPresets: textPresets,
                    isMobile: isMobile,
                    isRTL: isRTL,
                    isEditorX: isEditorX,
                    dimensions: dimensions,
                    experiments: experiments,
                    styleParamsPerBreakpointMode: styleParamsPerBreakpointMode
                }, options));
                return getParam(depParam);
            },
        });
    };
}
export function createStyleParamGetter(_a) {
    var styles = _a.storage,
        textPresets = _a.textPresets,
        _b = _a.colors,
        colors = _b === void 0 ? [] : _b,
        isMobile = _a.isMobile,
        isRTL = _a.isRTL,
        isEditorX = _a.isEditorX,
        dimensions = _a.dimensions,
        experiments = _a.experiments,
        styleParamsPerBreakpointMode = _a.styleParamsPerBreakpointMode;
    var getNumberParam = function(key) {
        return (styles.numbers || {})[key];
    };
    var getBooleanParam = function(key) {
        return (styles.booleans || {})[key];
    };
    var getFontParam = function(key) {
        return (styles.fonts || {})[key];
    };
    var getColorParam = function(key) {
        return (styles.colors || {})[key];
    };
    return function(param) {
        var _a;
        var getter = (_a = {},
            _a[StyleParamType.Number] = getNumberParam,
            _a[StyleParamType.Boolean] = getBooleanParam,
            _a[StyleParamType.Font] = getFontParam,
            _a[StyleParamType.Color] = getColorParam,
            _a)[param.type];
        var key = param.key || param.name;
        var value;
        if (styleParamsPerBreakpointMode) {
            value = getter(key);
        } else {
            var generatedKey = generateKey(__assign(__assign({}, param), {
                key: key
            }), {
                isMobile: isMobile
            });
            value = getter(generatedKey);
            var shouldInheritDesktop = paramShouldInheritDesktop(param);
            if (generatedKey !== key &&
                shouldInheritDesktop &&
                typeof value === 'undefined') {
                value = getter(key);
            }
        }
        if (typeof value === 'undefined' && param.getDefaultValue) {
            var getDefaultValue = createStyleParamDefaultValueGetter({
                styles: styles,
                textPresets: textPresets,
                colors: colors,
                isMobile: isMobile,
                isRTL: isRTL,
                isEditorX: isEditorX,
                dimensions: dimensions,
                experiments: experiments,
                styleParamsPerBreakpointMode: styleParamsPerBreakpointMode,
            });
            return getDefaultValue(param);
        }
        return value;
    };
}
//# sourceMappingURL=createStyleParamGetter.js.map