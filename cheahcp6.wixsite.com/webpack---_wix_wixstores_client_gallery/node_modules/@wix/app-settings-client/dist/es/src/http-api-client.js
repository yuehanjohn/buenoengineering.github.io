import {
    __assign,
    __awaiter,
    __generator
} from "tslib";
import {
    Scope
} from './domain';
import {
    HttpError
} from './errors';
var HttpApiClient = /** @class */ (function() {
    function HttpApiClient(apiUrl) {
        this.apiUrl = apiUrl.replace(/\/$/, '');
    }
    HttpApiClient.prototype.get = function(signedInstance, externalId, scope) {
        return __awaiter(this, void 0, void 0, function() {
            var url, json;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        url = "".concat(this.apiUrl, "/v1/settings?external_").concat(scope.toLowerCase(), "_id=").concat(externalId);
                        return [4 /*yield*/ , this.requestJson({
                            signedInstance: signedInstance,
                            url: url,
                            method: 'GET'
                        })];
                    case 1:
                        json = _a.sent();
                        return [2 /*return*/ , scope === Scope.APP ? json.appSettings : json.componentSettings];
                }
            });
        });
    };
    HttpApiClient.prototype.set = function(signedInstance, externalId, scope, data) {
        return __awaiter(this, void 0, void 0, function() {
            var url;
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        url = "".concat(this.apiUrl, "/v1/settings/").concat(scope, "/").concat(externalId);
                        return [4 /*yield*/ , this.requestJson({
                            signedInstance: signedInstance,
                            url: url,
                            requestBody: {
                                data: data
                            },
                            method: 'PUT'
                        })];
                    case 1:
                        return [2 /*return*/ , _a.sent()];
                }
            });
        });
    };
    HttpApiClient.prototype.update = function(signedInstance, externalId, scope, data) {
        return __awaiter(this, void 0, void 0, function() {
            var url, _a, fields, sanitizedData, requestBody, newExternalId;
            return __generator(this, function(_b) {
                switch (_b.label) {
                    case 0:
                        url = "".concat(this.apiUrl, "/v1/settings/").concat(scope, "/").concat(externalId);
                        _a = buildForUpdate(data), fields = _a.fields, sanitizedData = _a.sanitizedData;
                        requestBody = {
                            data: sanitizedData,
                            fields: fields
                        };
                        return [4 /*yield*/ , this.requestJson({
                            signedInstance: signedInstance,
                            url: url,
                            requestBody: requestBody,
                            method: 'PATCH'
                        })];
                    case 1:
                        newExternalId = (_b.sent()).newExternalId;
                        return [2 /*return*/ , newExternalId];
                }
            });
        });
    };
    HttpApiClient.prototype.requestJson = function(_a) {
        var signedInstance = _a.signedInstance,
            _b = _a.method,
            method = _b === void 0 ? 'GET' : _b,
            requestBody = _a.requestBody,
            url = _a.url;
        return __awaiter(this, void 0, void 0, function() {
            var additionalHeaders, response;
            return __generator(this, function(_c) {
                switch (_c.label) {
                    case 0:
                        additionalHeaders = signedInstance ? {
                            Authorization: signedInstance
                        } : {};
                        return [4 /*yield*/ , fetch(url, {
                            method: method,
                            body: JSON.stringify(requestBody),
                            headers: __assign({
                                'Content-Type': 'application/json'
                            }, additionalHeaders)
                        })];
                    case 1:
                        response = _c.sent();
                        if (!response.ok) {
                            throw new HttpError(url, response.status);
                        }
                        return [4 /*yield*/ , response.json()];
                    case 2:
                        return [2 /*return*/ , _c.sent()];
                }
            });
        });
    };
    return HttpApiClient;
}());

function buildForUpdate(data) {
    var cloned = __assign({}, data);
    var fields = Object.keys(cloned);
    Object.keys(cloned).forEach(function(key) {
        (cloned[key] === null || cloned[key] === undefined) && delete cloned[key];
    });
    return {
        fields: fields,
        sanitizedData: cloned
    };
}
export {
    HttpApiClient
};
//# sourceMappingURL=http-api-client.js.map