import {
    __assign,
    __read,
    __spread,
    __values
} from "tslib";
import {
    ProductInventoryStatus
} from '../types/product';
var ProductVariantCalculator = /** @class */ (function() {
    function ProductVariantCalculator(product) {
        this.product = product;
        this.variantSelectionIds = [];
    }
    ProductVariantCalculator.prototype.setVariantSelectionIds = function(variantSelectionIds) {
        this.variantSelectionIds = variantSelectionIds;
    };
    ProductVariantCalculator.prototype.getVariantSelectionIds = function() {
        var _this = this;
        var optionsIds = this.product.options.map(function(o) {
            return o.id;
        });
        var result = Array(optionsIds.length).fill(null);
        this.variantSelectionIds.forEach(function(selectionId) {
            var selectionsOptionId = getOptionBySelectionId({
                selectionId: selectionId,
                product: _this.product,
            }).id;
            var selectionsOptionIndex = optionsIds.indexOf(selectionsOptionId);
            result[selectionsOptionIndex] = selectionId;
        });
        return result.filter(function(id) {
            return id !== null;
        });
    };
    ProductVariantCalculator.prototype.updateProduct = function(product) {
        this.product = product;
    };
    ProductVariantCalculator.prototype.getSelectionsAvailability = function() {
        return calcSelectionsAvailability({
            product: this.product,
            variantSelectionIds: this.variantSelectionIds,
        });
    };
    ProductVariantCalculator.prototype.getMediaItems = function() {
        return getProductsMediaItems({
            product: this.product,
            variantSelectionIds: this.variantSelectionIds,
        });
    };
    ProductVariantCalculator.prototype.getPriceInfo = function() {
        return getProductsPriceInfo({
            product: this.product,
            variantSelectionIds: this.variantSelectionIds,
        });
    };
    ProductVariantCalculator.prototype.canAddToCart = function() {
        return canAddToCart({
            product: this.product,
            variantSelectionIds: this.variantSelectionIds,
        });
    };
    return ProductVariantCalculator;
}());
export {
    ProductVariantCalculator
};
export function calcSelectionsAvailability(params) {
    var _a, _b;
    var product = params.product;
    return ((_b = (_a = product.options) === null || _a === void 0 ? void 0 : _a.reduce(function(result, option) {
        var _a;
        return (__assign(__assign({}, result), (_a = {}, _a[option.id] = calcSelectionAvailabilityByOption(__assign(__assign({}, params), {
            optionId: option.id
        })), _a)));
    }, {})) !== null && _b !== void 0 ? _b : {});
}
export function getProductsMediaItems(params) {
    var variantSelectionIds = params.variantSelectionIds,
        product = params.product;
    if (!variantSelectionIds.length) {
        return product.media;
    }
    var mediaItems = variantSelectionIds.reduce(function(resultMediaItems, selectionId) {
        var _a, _b;
        var selectionsMediaItems = (_b = (_a = getSelectionById({
            product: product,
            selectionId: selectionId,
        })) === null || _a === void 0 ? void 0 : _a.linkedMediaItems) !== null && _b !== void 0 ? _b : [];
        return __spread(resultMediaItems, selectionsMediaItems);
    }, []);
    if (!mediaItems.length) {
        return product.media;
    }
    return mediaItems;
}
export function getProductsPriceInfo(params) {
    var _a, _b, _c, _d, _e;
    var product = params.product,
        variantSelectionIds = params.variantSelectionIds;
    var productItem = getProductVariantBySelectionIds({
        product: product,
        variantSelectionIds: variantSelectionIds,
    });
    return {
        price: (_a = productItem === null || productItem === void 0 ? void 0 : productItem.price) !== null && _a !== void 0 ? _a : product.price,
        formattedPrice: (_b = productItem === null || productItem === void 0 ? void 0 : productItem.formattedPrice) !== null && _b !== void 0 ? _b : product.formattedPrice,
        comparePrice: (_c = productItem === null || productItem === void 0 ? void 0 : productItem.comparePrice) !== null && _c !== void 0 ? _c : product.comparePrice,
        formattedComparePrice: (_d = productItem === null || productItem === void 0 ? void 0 : productItem.formattedComparePrice) !== null && _d !== void 0 ? _d : product.formattedComparePrice,
        formattedPricePerUnit: (_e = productItem === null || productItem === void 0 ? void 0 : productItem.formattedPricePerUnit) !== null && _e !== void 0 ? _e : product.formattedPricePerUnit,
    };
}

function calcSelectionAvailabilityByOption(params) {
    var _a, _b;
    var product = params.product,
        optionId = params.optionId;
    var option = product.options.find(function(o) {
        return o.id === optionId;
    });
    return ((_b = (_a = option.selections) === null || _a === void 0 ? void 0 : _a.reduce(function(result, selection) {
        var _a;
        var _b, _c;
        var isVisible;
        var isSelectable;
        if (!product.isManageProductItems) {
            isVisible = true;
            isSelectable = product.isInStock || !!((_b = product.inventory) === null || _b === void 0 ? void 0 : _b.availableForPreOrder);
        } else if (product.productItems.length === 0) {
            isVisible = true;
            isSelectable = !product.isTrackingInventory || !!((_c = product.inventory) === null || _c === void 0 ? void 0 : _c.availableForPreOrder);
        }
        if (typeof isVisible === 'undefined' || typeof isSelectable === 'undefined') {
            var nextSelections_1 = composeNextSelectionIds(__assign(__assign({}, params), {
                selectionId: selection.id
            }));
            var matchedAvailabilityItems = composeProductItemsAvailability(product).filter(function(item) {
                return nextSelections_1.every(function(selectionIdInItem) {
                    return item.selectionIds.includes(selectionIdInItem);
                });
            });
            isVisible = isVisible !== null && isVisible !== void 0 ? isVisible : matchedAvailabilityItems.some(function(item) {
                return item.isVisible;
            });
            isSelectable = isSelectable !== null && isSelectable !== void 0 ? isSelectable : matchedAvailabilityItems.some(function(item) {
                return item.isSelectable;
            });
        }
        return __assign(__assign({}, result), (_a = {}, _a[selection.id] = {
            isVisible: isVisible,
            isSelectable: isSelectable,
        }, _a));
    }, {})) !== null && _b !== void 0 ? _b : {});
}

function isProductVariantItemIsInStock(_a) {
    var _b;
    var product = _a.product,
        productItem = _a.productItem;
    if (!productItem) {
        return !product.isTrackingInventory || ((_b = product.inventory) === null || _b === void 0 ? void 0 : _b.availableForPreOrder);
    }
    var isInStock = product.isTrackingInventory ?
        productItem.inventory.quantity > 0 :
        productItem.inventory.status === ProductInventoryStatus.IN_STOCK;
    return isInStock || !!productItem.availableForPreOrder;
}

function isProductIsInStockByItsOwn(_a) {
    var _b;
    var product = _a.product;
    var isPreOrderProduct = (_b = product.inventory) === null || _b === void 0 ? void 0 : _b.availableForPreOrder;
    if (!product.isManageProductItems && (product.isInStock || isPreOrderProduct)) {
        return true;
    }
    if (product.isManageProductItems && product.productItems.length === 0) {
        return true;
    }
    return false;
}

function filterOutSelectionIdsByOptionId(_a) {
    var product = _a.product,
        selectionIds = _a.selectionIds,
        optionId = _a.optionId;
    var blockList = product.options.find(function(o) {
        return o.id === optionId;
    }).selections.map(function(s) {
        return s.id;
    });
    return selectionIds.filter(function(id) {
        return !blockList.includes(id);
    });
}

function getOptionBySelectionId(_a) {
    var product = _a.product,
        selectionId = _a.selectionId;
    return product.options.find(function(option) {
        return option.selections.some(function(selection) {
            return selection.id === selectionId;
        });
    });
}

function getSelectionById(_a) {
    var e_1, _b;
    var product = _a.product,
        selectionId = _a.selectionId;
    try {
        for (var _c = __values(product.options), _d = _c.next(); !_d.done; _d = _c.next()) {
            var option = _d.value;
            var selection = option.selections.find(function(s) {
                return s.id === selectionId;
            });
            if (selection) {
                return selection;
            }
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally {
        try {
            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
        } finally {
            if (e_1) throw e_1.error;
        }
    }
    return undefined;
}
export function canAddToCart(_a) {
    var _b;
    var product = _a.product,
        variantSelectionIds = _a.variantSelectionIds;
    if (variantSelectionIds.length < product.options.length || ((_b = product.customTextFields) === null || _b === void 0 ? void 0 : _b.length)) {
        return false;
    }
    var isProductInStock = isProductIsInStockByItsOwn({
        product: product
    });
    if (isProductInStock || !product.options.length) {
        return isProductInStock;
    }
    var productItem = getProductVariantBySelectionIds({
        product: product,
        variantSelectionIds: variantSelectionIds
    });
    if (!product.productItems.length || (productItem === null || productItem === void 0 ? void 0 : productItem.isVisible) === false) {
        return false;
    }
    var isVariantInStock = isProductVariantItemIsInStock({
        product: product,
        productItem: productItem
    });
    return !!(isProductInStock || isVariantInStock);
}
export function getProductVariantBySelectionIds(_a) {
    var _b;
    var product = _a.product,
        variantSelectionIds = _a.variantSelectionIds;
    var comparator = function(a, b) {
        return a - b;
    };
    var sortedSelectionsStr = __spread(variantSelectionIds).sort(comparator).join('');
    return (_b = product.productItems) === null || _b === void 0 ? void 0 : _b.find(function(_a) {
        var optionsSelections = _a.optionsSelections;
        return sortedSelectionsStr === __spread(optionsSelections).sort(comparator).join('');
    });
}

function composeAllPossibleVariantSelectionIdCombos(product) {
    var possibleVariants = [];
    var selectionIndexes = Array(product.options.length).fill(0);
    possibleVariants.push(product.options.map(function(option, optionIndex) {
        return option.selections[selectionIndexes[optionIndex]].id;
    }));
    while (!selectionIndexes.every(function(selectionIndex, optionIndex) {
            return selectionIndex + 1 === product.options[optionIndex].selections.length;
        })) {
        selectionIndexes.some(function(selectionIndex, optionIndex) {
            var isNotLastSelection = selectionIndex + 1 < product.options[optionIndex].selections.length;
            if (isNotLastSelection) {
                for (var optionIndexToReset = 0; optionIndexToReset < optionIndex; optionIndexToReset += 1) {
                    selectionIndexes[optionIndexToReset] = 0;
                }
                selectionIndexes[optionIndex] += 1;
            }
            return isNotLastSelection;
        });
        possibleVariants.push(product.options.map(function(option, optionIndex) {
            return option.selections[selectionIndexes[optionIndex]].id;
        }));
    }
    return possibleVariants;
}

function composeProductItemsAvailability(product) {
    return composeAllPossibleVariantSelectionIdCombos(product).map(function(selectionIds) {
        var _a;
        var productItem = findProductItemBySelectionIds({
            product: product,
            selectionIds: selectionIds
        });
        if (!productItem) {
            return {
                selectionIds: selectionIds,
                isVisible: true,
                isSelectable: !product.isTrackingInventory || ((_a = product.inventory) === null || _a === void 0 ? void 0 : _a.availableForPreOrder),
            };
        }
        return {
            selectionIds: selectionIds,
            isSelectable: isProductVariantItemIsInStock({
                product: product,
                productItem: productItem
            }),
            isVisible: productItem.isVisible,
        };
    });
}

function findProductItemBySelectionIds(_a) {
    var product = _a.product,
        selectionIds = _a.selectionIds;
    return product.productItems.find(function(productItem) {
        return productItem.optionsSelections.every(function(selectionIdInItem) {
            return selectionIds.includes(selectionIdInItem);
        });
    });
}

function composeNextSelectionIds(params) {
    var product = params.product,
        selectionId = params.selectionId,
        variantSelectionIds = params.variantSelectionIds;
    return __spread([
        selectionId
    ], filterOutSelectionIdsByOptionId({
        product: product,
        selectionIds: variantSelectionIds,
        optionId: getOptionBySelectionId({
            product: product,
            selectionId: selectionId,
        }).id,
    }));
}
//# sourceMappingURL=ProductVariantCalculator.js.map