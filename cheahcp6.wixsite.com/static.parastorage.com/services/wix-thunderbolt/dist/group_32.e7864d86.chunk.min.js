"use strict";
(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([
    [2784], {
        97984: function(e, t, n) {
            n.r(t), n.d(t, {
                PageTransitionsCompletedSymbol: function() {
                    return a.kP
                },
                PageTransitionsSymbol: function() {
                    return a.Yj
                },
                editor: function() {
                    return w
                },
                editorPage: function() {
                    return v
                },
                page: function() {
                    return U
                }
            });
            var o = n(27956),
                i = n(23604),
                r = n(82560),
                a = n(76952),
                s = n(98192);
            const d = (0, o.ic)([(0, o.iE)(i.wx, a.N9), (0, o.iE)(i.a_, a.N9), a.kP, s.G, r.kb], ((e, t, n, o, i) => {
                    const r = !!i && "startViewTransition" in i.document && e.shouldUseViewTransition;
                    return {
                        name: "pageTransitions",
                        pageDidMount(o) {
                            const i = t.get(),
                                r = i ? .mountDoneHandler;
                            r && r({
                                transitionName: e.transitionName,
                                pageId: o
                            }), (i ? .isFirstMount ? ? 1) && n.notifyPageTransitionsCompleted(o), t.update((e => ({ ...e,
                                isFirstMount: !1
                            })))
                        },
                        pageWillUnmount({
                            contextId: e
                        }) {
                            const a = t.get();
                            if (r) {
                                const e = () => {
                                        o.getScrollYHistoryState() || o.scrollToTop()
                                    },
                                    r = e => {
                                        n.notifyPageTransitionsCompleted(e), o.getScrollYHistoryState() && o.restoreScrollPosition()
                                    };
                                ! function(e, t, n, o) {
                                    let i, r;
                                    t.document.documentElement.dataset.viewTransition = "page-transition";
                                    const a = document.startViewTransition((() => e.then((e => {
                                        r = e.transitionName, i = e.pageId, t.document.documentElement.dataset.pageTransition = r
                                    }))));
                                    a.ready.then(n), a.finished.then((() => {
                                        delete t.document.documentElement.dataset.viewTransition, o(i)
                                    }))
                                }(new Promise((e => {
                                    t.update((t => ({ ...t,
                                        mountDoneHandler: e
                                    })))
                                })), i, e, r)
                            }
                            a ? .propsUpdateListenersUnsubscribers ? .[e] ? .(), t.update((t => {
                                const n = t ? .propsUpdateListenersUnsubscribers ? ? {};
                                return delete n[e], { ...t,
                                    propsUpdateListenersUnsubscribers: n
                                }
                            }))
                        }
                    }
                })),
                c = (0, o.ic)([(0, o.iE)(i.a_, a.N9)], (e => ({
                    disableNextTransition: () => e.update((e => ({ ...e,
                        nextTransitionEnabled: !1
                    })))
                }))),
                l = (0, o.ic)([], (() => {
                    let e = [];
                    return {
                        onPageTransitionsCompleted: t => {
                            e.push(t)
                        },
                        notifyPageTransitionsCompleted: t => {
                            e.forEach((e => e(t))), e = []
                        }
                    }
                }));
            var u = n(5632),
                p = n(97060),
                g = n(22076);
            const m = (0, o.ic)([(0, o.iE)(i.wx, a.N9), g.C, a.kP, s.G, (0, o.iE)(i.a_, a.N9), r.kb], ((e, t, n, o, i, r) => ({
                componentTypes: ["Page"],
                componentWillMount(a) {
                    const s = i.get(),
                        d = !s || s.nextTransitionEnabled,
                        c = !s || s.isFirstMount,
                        l = !!r && "startViewTransition" in r.document && e.shouldUseViewTransition,
                        u = a.id;
                    t.update({
                        SITE_PAGES: {
                            transitionEnabled: d,
                            ...l ? {} : {
                                onTransitionStarting: () => {
                                    o.getScrollYHistoryState() || o.scrollToTop()
                                },
                                onTransitionComplete: () => {
                                    n.notifyPageTransitionsCompleted(u), o.getScrollYHistoryState() && o.restoreScrollPosition()
                                }
                            }
                        }
                    }), i.update((() => ({ ...s,
                        isFirstMount: c,
                        nextTransitionEnabled: !0
                    })))
                }
            })));
            var T = n(98684),
                b = n(28088),
                y = n.n(b);
            const f = ["video.videoInfo.videoId", "image.uri", "image.link.href", "image.displayMode", "backgroundImage.uri", "backgroundImage.link.href", "backgroundImage.displayMode"],
                P = ["type", "alignType", "fittingType", "scrollType", "colorOverlay", "colorOverlayOpacity", "color", "opacity"],
                k = (e, t, n, o) => o.every((n => (e && e[n]) === (t && t[n]))) && n.every((i => !e && !t || k(e && e[i], t && t[i], n, o))),
                E = (0, o.ic)([(0, o.iE)(i.wx, a.N9), g.C, a.kP, s.G, (0, o.iE)(i.a_, a.N9), T.iq, T.Il], ((e, t, n, o, i, r, a) => {
                    const s = `pageBackground_${r}`,
                        d = t.subscribeToChanges((n => {
                            if (s in n) {
                                const a = n[s] ? .fillLayers,
                                    d = i.get().pageBackgroundProp,
                                    c = e.pageBackground,
                                    l = i.get().pageBackground,
                                    u = i.get() ? .nextTransitionEnabled ? ? !0,
                                    p = !((e, t) => {
                                        if (!t || !e) return !1;
                                        const n = t.mediaRef,
                                            o = n && n.type,
                                            i = e.mediaRef,
                                            r = i && i.type,
                                            a = !n && !i,
                                            s = a || o === r;
                                        let d = [...P];
                                        if ("WixVideo" === o && s) {
                                            const e = d.indexOf("color");
                                            d.splice(e, 1)
                                        } else a && (d = ["color"]);
                                        return s && k(t, e, ["mediaRef", "imageOverlay"], d)
                                    })(c, l),
                                    g = (o = a, !((r = d) && o && f.every((e => y().get(r, e) === y().get(o, e)))) || p);
                                i.update((e => ({ ...e,
                                    pageBackgroundProp: a,
                                    pageBackground: c
                                }))), t.update({
                                    BACKGROUND_GROUP: {
                                        transitionEnabled: u && g
                                    }
                                })
                            }
                            var o, r
                        }));
                    return i.update((e => {
                        const t = e ? .propsUpdateListenersUnsubscribers ? ? {};
                        return t[a] = d, { ...e || {},
                            propsUpdateListenersUnsubscribers: t
                        }
                    })), {
                        componentTypes: ["PageBackground"],
                        componentWillMount() {
                            const e = i.get(),
                                t = e ? .isFirstMount ? ? !0;
                            i.update((() => ({ ...e,
                                isFirstMount: t
                            })))
                        }
                    }
                })),
                U = e => {
                    e(a.kP).to(l), e(a.Yj).to(c), e(u.c.PageDidMountHandler, u.c.PageWillUnmountHandler).to(d), e(p.sj).to(m), e(p.sj).to(E)
                },
                v = e => {
                    e(u.c.PageDidMountHandler, u.c.PageWillUnmountHandler).to(d), e(p.sj).to(m), e(p.sj).to(E)
                },
                w = e => {
                    e(a.Yj).to(c), e(a.kP).to(l)
                }
        }
    }
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/group_32.e7864d86.chunk.min.js.map